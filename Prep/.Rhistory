#Add species info to fish data
fish3<-merge(fish2, org, by.x = "OrganismId", by.y = "OrganismID", all.x= T)
#test the merge
test1=fish_in_inverts2[which(fish_in_inverts2$OrganismId %!in% org$OrganismID),] ##This function tells me that no OrganismIDs are found in fish2 but not found in org
fish_in_inverts3<-merge(fish_in_inverts2, org, by.x = "OrganismId", by.y = "OrganismID", all.x= T)
#helps me remember that all fish lengths are in this one
fishlengths <- fish3
fish_inverts_lengths <- fish_in_inverts3
library(dplyr)
#Limit to 1 record for each sample- species combination. (Drops multiple length measurements.)
#one row with counts for each species, not lengths for all
#use catch1 if wanting all length meausurements
catch2 <-catch1 %>% distinct(SampleID_key, OrganismId, .keep_all=TRUE)
#excel file with all fish species and lengths
write.csv(fishlengths, file=here::here("Export.Files", paste('Fish_catch_all', "_",Sys.Date(),".csv", sep = '')))
write.csv(fish_inverts_lengths, file=here::here("Export.Files", paste('Fish_in_inverts_all_lengths', "_",Sys.Date(),".csv", sep = ''))) #I believe this is the file that gets sent to the invert lead
######COUNT CHECK################
#test the merge
test1=f2[which(f2$SampleID_frp %!in% fish1$SampleID_frp), c("SampleID_frp","VisitNo")] ##This function tells me that no SampleIDs are found in f2 but not found in fish1
#test the merge
test2=fish1[which(fish1$SampleID_frp %!in% f2$SampleID_frp), c("SampleID_frp","VisitNo")] ##This function tells me that no SampleIDs are found in fish1 but not found in f2
# # Christy helped explain, there is maybe a better way
# #makes a column titled f2 with a value of one
# f2$f2=1
# #makes a column titled fish1 with a value of one
# fish1$fish1=1
# #merge together
# f2_fish1<-merge(x=f2,y=fish1,by="SampleID_frp",all=TRUE)
# #Add f2 and fish1, should equal 2 if present in both dataframes
# f2_fish1$check<-f2_fish1$f2 + f2_fish1$fish1
# write.csv(f2_fish1, file = here::here("Export.Files","Data.Checks", "Sample_Check.csv"))
# #If any "1"s are present in the "check" column, that means the sample is missing from either f2 or fish1
# end of check ------------------------------------------------------------
############################## Count Check ##########################################################
# To check that the number of measured fish and plus count add up to the total catch per sample/species combo
#Make fish3 a dataframe
fish3 = data.frame(fish3)
#christy what does this do?
#fish3[fish3 == 0] <- NA
#filter out only chordata (fish)
Chord_only = filter(fish3, fish3$Phylum == "Chordata")
sort(unique(Chord_only$Class))
fish_only = filter(Chord_only, Chord_only$Class != "Amphibia")
sort(unique(fish_only$Class))
Chord_only_inverts = filter(fish_in_inverts3, fish_in_inverts3$Phylum == "Chordata")
sort(unique(Chord_only_inverts$Class))
fish_only_inverts = filter(Chord_only_inverts, Chord_only_inverts$Class != "Amphibia")
sort(unique(fish_only_inverts$Class))
library(plyr)
library(dplyr)
# Make the dataframe and calculate count, effort, for each taxa group in a SampleID
#counts_check = summarize(group_by(fish_only, SampleID_frp, OrganismCode),length_count = length(is.na(FishLength)==F))
counts_check = ddply(fish_only, c("SampleID_frp", "OrganismCode"),
summarise,
length_count = length(is.na(FishLength)==F)
)
counts_check_inverts = ddply(fish_only_inverts, c("SampleID_frp", "OrganismCode"),
summarise,
length_count = length(is.na(FishLength)==F)
)
# add the calculated count to your other data set
fish4 = merge(fish3, counts_check, by=c("SampleID_frp","OrganismCode"), all.x=T)
fish_in_inverts4 = merge(fish_in_inverts3, counts_check_inverts, by=c("SampleID_frp","OrganismCode"), all.x=T)
# Make it so we have one row per sampleid-species combination
fish_test=distinct(fish4,fish4$SampleID_frp, fish4$CommonName, .keep_all = T)
fish_in_verts_test=distinct(fish_in_inverts4,fish_in_inverts4$SampleID_frp, fish_in_inverts4$CommonName, .keep_all = T)
# make a column to hold the check
fish_test$count_check = NA
fish_in_verts_test$count_check = NA
# Calculate the difference
fish_test$count_check = (fish_test$TotalCatch - fish_test$PlusCount-fish_test$length_count)
fish_in_verts_test$count_check = (fish_in_verts_test$TotalCatch - fish_in_verts_test$PlusCount - fish_in_verts_test$length_count)
# Check your results
test_fish_counts = filter(fish_test, fish_test$count != 0)
test_fish_in_verts_counts = filter(fish_in_verts_test, fish_in_verts_test$count != 0)
#Equals zero when all counts add up
#Plus count only species (invertebrates or carp (other fish) when they jump out) might have a value of -1 due to length_count being NA (which apparently still counts as one)
#Good to go, only plus count fish left that add up in database and match datasheets - ED 26JUN2024
#export and correct any fish counts that are wrong
write.csv(test_fish_counts, file = here::here("Export.Files","Data.Checks", paste('fish_count_check', "_",Sys.Date(),".csv", sep = '')))
write.csv(test_fish_in_verts_counts, file = here::here("Export.Files","Data.Checks", paste('fish_in_verts_count_check', "_",Sys.Date(),".csv", sep = '')))
#Correct any fish counts that are off in database and re-export
save(list=ls(),file= here::here("RData","fish_prep_code_12.RData")) #replace list=ls() with names of objects you want to keep, currently keeps all
View(f_check2)
# Clear environment
rm(list = ls(all.names = TRUE)) #will clear all objects includes hidden objects.
load(here::here("RData","fish_prep_code_13.RData"))
#Load FRP Mac Data
site_visits_edi<-read.csv(here::here("imports_ED/working", "SiteVisit2023_LocationsChecked_DMC240626.csv")) # FROM DANNY
#Load FRP Mac Data
site_visits_edi<-read.csv(here::here("imports_ED\working", "SiteVisit2023_LocationsChecked_DMC240626.csv")) # FROM DANNY
#Load FRP Mac Data
site_visits_edi<-read.csv(here::here("imports_ED/working", "SiteVisit2023_LocationsChecked_DMC240626.csv")) # FROM DANNY
#Load FRP Mac Data
site_visits_edi<-read.csv(here::here("imports_ED/working", "SiteVisit2023_LocationsChecked_DMC240626.csv")) # FROM DANNY
#Load FRP Mac Data
site_visits_edi<-read.csv(here::here("C:/Users/edavidson/GitHub/AnnualReport_2023/AnnualBook_2023/imports_ED/working", "SiteVisit2023_LocationsChecked_DMC240626.csv")) # FROM DANNY
lengths_verts <-read.csv(here::here("working","Invertebrate_30AUG2024.csv")) # FROM DATABASE
lengths_verts <- lengths_verts[,c("SampleID_key","OrganismId","EntryOrder","InvertebrateLength")]#Select desired columns, sampleID_key is a unique identifier for each measured individual
names(lengths_verts)[which(colnames(lengths_verts)=="InvertebrateLength")]<-"FishLength"
org <- read.csv(here::here("C:/Users/edavidson/GitHub/AnnualReport_2023/AnnualBook_2023/imports_ED/working","OrganismCode_ZooCodes_Merged_06AUG2024.csv"))
names(org)[which(colnames(org)=="Ã¯..OrganismID")]<-"OrganismId"
site_visits_edi <- site_visits_edi[,c("VisitNo","newLocation")]
sitesample<-sitesample %>% filter(Visit.Date >= as.Date("2023-01-01"))
sitesample<-sitesample %>% filter(Visit.Date <= as.Date("2023-12-31"))
library(dplyr)
sitesample<-sitesample %>% filter(Visit.Date >= as.Date("2023-01-01"))
sitesample<-sitesample %>% filter(Visit.Date <= as.Date("2023-12-31"))
sitesample <- sitesample[,c("VisitNo","SampleID_key", "GearTypeAbbreviation", "Location")]
catch1 <- catch1[,c("SampleID_key","FishLength","OrganismId","EntryOrder")]
all_catch <-rbind(catch1,lengths_verts)
sitesample_visit = merge(site_visits_edi, sitesample, by="VisitNo", all.x = T)
sitesample_visit_mac = subset(sitesample_visit, sitesample_visit$GearTypeAbbreviation == "MAC")
all_vert_lengths_sv = left_join(sitesample_visit_mac, all_catch, by = "SampleID_key", all.x=T)
fishlengths_MAC = left_join(all_vert_lengths_sv, org, by="OrganismId", all.x=T)
# Save for use in figure code, for histograms
# Save for use in figure code, for histograms
write.csv(fishlengths_MAC, file=here::here("Export.Files", paste('Fishlengths_MAC', "_",Sys.Date(),".csv", sep = '')))
save(list=ls(),file= here::here("RData","fish_prep_code_14.RData"))
# Clear environment
rm(list = ls(all.names = TRUE)) #will clear all objects includes hidden objects.
load(here::here("RData","fish_prep_code_15.RData"))
# Clear environment
rm(list = ls(all.names = TRUE)) #will clear all objects includes hidden objects.
load(here::here("imports_ED/working/RData","ALL_fish_figure_code_11.RData"))
# Clear environment
rm(list = ls(all.names = TRUE)) #will clear all objects includes hidden objects.
load(here::here("imports_ED/working/RData","ALL_fish_figure_code_11.RData"))
# Clear environment
rm(list = ls(all.names = TRUE)) #will clear all objects includes hidden objects.
load(here::here("RData","fish_prep_code_13.RData"))
fish7 <- fish3
TotalCPUE5 <-TotalCPUE4
test_fishnotes<- fish6[,c("VisitNo","SampleID_frp","CommonName","FishLength","FishLengthComments","FishCatchNotes")]
#test the merge
###How do we identify which SampleIDs are found in 1 dataset and not the other?
`%!in%` = Negate(`%in%`) ##Run this line of code to create our own function which is %!in$; this function tells us what objects are not found in common between 2 vectors
(fish7$SampleID_key) ##A vector of  SampleIDs found in dataframe x.3
(TotalCPUE5$SampleID_key) ##A vector of  SampleIDs found in dataframe y.3
test1=fish7[which(fish7$SampleID_key %!in% TotalCPUE5$SampleID_key),] ##This function tells me that no SampleID_key is found in fish1 but not found in catch1
# 0 - ED 26JUN2024
test2=TotalCPUE5[which(TotalCPUE5$SampleID_key %!in% fish7$SampleID_key),] ##This function tells me that no SampleID_key is found in fish1 but not found in catch1
fish7 <- fish7[,c("SampleID_key","CommonName","FishLength", "PlusCount","TotalCatch",  "FishLengthComments","EntryOrder")]
TotalCPUE5 <- TotalCPUE5[,c("VisitNo","SampleID_key", "SampleID_frp", "StartTime", "EndTime","Duration", "LatitudeStart","LatitudeEnd",	"LongitudeStart","LongitudeEnd","DepthMeters", "NetMeterStart", "NetMeterEnd", "TowDirection", "SeineCode","SeineDeploymentType", "LengthOfTrawl", "Width","PercentOpen", "GearTypeAbbreviation", "volume","Location","Visit.Date2", "Comments")]
fish_FRP2023<- merge(TotalCPUE5, fish7, by="SampleID_key", all.x = T)
fish_FRP2023$LAB_NAME<-"FRP"
fish_FRP2023 <- fish_FRP2023[,c("VisitNo","SampleID_key", "SampleID_frp","CommonName", "FishLength", "PlusCount","TotalCatch","StartTime", "EndTime","Duration", "LatitudeStart","LatitudeEnd",	"LongitudeStart","LongitudeEnd","DepthMeters","NetMeterEnd", "TowDirection","NetMeterStart", "SeineCode","SeineDeploymentType", "LengthOfTrawl", "Width","PercentOpen", "GearTypeAbbreviation", "volume","LAB_NAME", "Location","Visit.Date2", "Comments" ,"FishLengthComments")]
# Change column names
names(fish_FRP2023)[which(colnames(fish_FRP2023)=="SampleID_frp")]<-"SampleID"
names(TotalCPUE5)[which(colnames(TotalCPUE5)=="SampleID_frp")]<-"SampleID"
names(test_fishnotes)[which(colnames(test_fishnotes)=="SampleID_frp")]<-"SampleID"
names(fish_FRP2023)[which(colnames(fish_FRP2023)=="DepthMeters")]<-"DepthOfWater"
names(TotalCPUE5)[which(colnames(TotalCPUE5)=="DepthMeters")]<-"DepthOfWater"
names(fish_FRP2023)[which(colnames(fish_FRP2023)=="Visit.Date2")]<-"Date"
names(TotalCPUE5)[which(colnames(TotalCPUE5)=="Visit.Date2")]<-"Date"
names(fish_FRP2023)[which(colnames(fish_FRP2023)=="volume")]<-"effort"
names(TotalCPUE5)[which(colnames(TotalCPUE5)=="volume")]<-"effort"
names(fish_FRP2023)[which(colnames(fish_FRP2023)=="FishLength")]<-"Length"
names(TotalCPUE5)[which(colnames(TotalCPUE5)=="FishLength")]<-"Length"
names(test_fishnotes)[which(colnames(test_fishnotes)=="FishLength")]<-"Length"
##### FROM Christy's code #####################################################################
fnew<- fish_FRP2023
fnew$Count<-NA
#fix 2022 and 2023 data
#separate non measured taxa, where length = NA
fnew_invert<-fnew
#FIX ERROR IN COUNT FOR MEASURED FISH IN 2022 and 2023
#separate nonmeasured and measured taxa, create a file for each
unique(fnew$Length) #numbers and NA
sort(unique(fnew$Length)) #no zeros, all reasonable lengths
fnew_fishnotmeasured<- fnew[is.na(fnew$Length),] #these are good to go with current counts
#FIX ERROR IN COUNT FOR MEASURED FISH IN 2022 and 2023
#separate nonmeasured and measured taxa, create a file for each
unique(fnew$Length) #numbers and NA
sort(unique(fnew$Length)) #no zeros, all reasonable lengths
fnew_fishnotmeasured<- fnew[is.na(fnew$Length),] #these are good to go with current counts
sort(unique(fnew_fishnotmeasured$CommonName))
fnew_fishmeasured<- fnew[!is.na(fnew$Length),] #all are fish
sort(unique(fnew_fishmeasured$CommonName))
#check didn't lose records- must be zero
nrow(fnew)-nrow(fnew_fishmeasured)-nrow(fnew_fishnotmeasured)
#make a file of sample info (not count and length) to remerge with count-taxonomy files later.
fnew2<-fnew[,c("Comments", "CommonName", "Date", "DepthOfWater", "effort", "FishLengthComments", "GearTypeAbbreviation", "LAB_NAME", "LatitudeEnd", "LatitudeStart", "LengthOfTrawl", "Location", "LongitudeEnd", "LongitudeStart", "NetMeterEnd", "NetMeterStart", "PercentOpen", "SampleID", "SampleID_key", "SeineCode", "SeineDeploymentType", "StartTime", "TowDirection", "Date", "VisitNo", "Width")] #FIX ADD ENDTIME AND DURATION, and in above code too
fnew2<-unique.data.frame(fnew2)
nrow(fnew2) #1126 sampleID x commonnames (with measured and not measured)
#Fish not measured
sort(unique(fnew_fishnotmeasured$CommonName)) #mostly inverts, only fish are a mosquitofish that escaped and Silverside unids and jumpy carp that weren't measured- should be good
fnew_fishnotmeasured<-subset(fnew_fishnotmeasured, select=c(SampleID, CommonName, PlusCount)) #CHECK COUNT IS ACTUALLY PLUS COUNT. EMMA SAYS PLUS COUNT SHOULD BE PLUS COUNT.
fnew_fishnotmeasured$Length<-NA
#Measured fish- will create files for plus count and measured
#calculate number of lengths per taxa per sampleID
fnew_fishmeasured_n<-aggregate(x=fnew_fishmeasured$Length,
by=list(fnew_fishmeasured$SampleID,
fnew_fishmeasured$CommonName),
FUN=length)
fnew_fishmeasured_n$SampleID<-fnew_fishmeasured_n$Group.1
fnew_fishmeasured_n$CommonName<-fnew_fishmeasured_n$Group.2
#1098 combinations of SampleID-CommonName (of measured fish)
#Make a file with one row for each sampleID-CommonName
fnew_fishmeasured_plus<-subset(fnew_fishmeasured, select = c(SampleID, CommonName, Count, PlusCount))
fnew_fishmeasured_plus<-unique.data.frame(fnew_fishmeasured_plus)
fnew_fishmeasured_plus<-dplyr::full_join(fnew_fishmeasured_plus, fnew_fishmeasured_n)#, #by=join_by(SampleID==Group.1,CommonName==Group.2))## Is this the best way to join these? -ECM 23DEC2024
#Check the actual number of measured fish (from aggregate) is the same as count-plus count.
fnew_fishmeasured_plus$test<-fnew_fishmeasured_plus$Count-fnew_fishmeasured_plus$PlusCount-fnew_fishmeasured_plus$x #All are zero, except two records with a plus count=NA where all fish are measured
unique(fnew_fishmeasured_plus$test)
#Need to separate fish into two files: One file (fnew_fishmeasured_plus) with nonmeasured fish and a count that's equal to the plus count (fnew_fishmeasured_only). A second file will have all measured fish, with a count of 1
fnew_fishmeasured_plus$countnew<-fnew_fishmeasured_plus$PlusCount
#drop NAs
fnew_fishmeasured_plus<-fnew_fishmeasured_plus[!is.na(fnew_fishmeasured_plus$countnew),]
#drop if all fish are measured (newcount is zero)
fnew_fishmeasured_plus<-fnew_fishmeasured_plus[(fnew_fishmeasured_plus$countnew >0),]
fnew_fishmeasured_plus$Count<-NULL
fnew_fishmeasured_plus$Count<-fnew_fishmeasured_plus$countnew
fnew_fishmeasured_plus<-subset(fnew_fishmeasured_plus, select=c(SampleID, CommonName, Count))
fnew_fishmeasured_plus$Length<-NA
#Limit to measured fish only and make counts 1
fnew_fishmeasured_only<- fnew_fishmeasured[(fnew_fishmeasured$Length>0),]
fnew_fishmeasured_only$Count<-NULL
fnew_fishmeasured_only$Count<-1
fnew_fishmeasured_only<-subset(fnew_fishmeasured_only, select=c(SampleID, CommonName, Length, Count))
#merge files- nonmeasured taxa, measured fish, and plus count measure fish
nrow(fnew) #4266
nrow(fnew2) #1126
nrow(fnew_fishnotmeasured) #443
nrow(fnew_fishmeasured_plus) #61
nrow(fnew_fishmeasured_only) #3823
names(fnew_fishnotmeasured)[which(colnames(fnew_fishnotmeasured)=="PlusCount")]<-"Count"
fnew_allfish<-rbind(fnew_fishnotmeasured, fnew_fishmeasured_plus, fnew_fishmeasured_only)
fnew3<-dplyr::full_join(fnew_allfish, fnew2)
nrow(fnew3) #7520
nrow(fnew3)-nrow(fnew)-nrow(fnew_fishmeasured_plus)
#FIX_ FIGURE OUT MATH FOR NUMBER OF ROWS CHANGED WHEN ADJUSTING PLUS COUNT/COUNT/LENGTHS
#Adding rows- number of new rows is equal to #plus count fish species with measured and nonmeasured fish- ADD CODE TO CALCULATE
fnew_counts<-fnew[,c("SampleID","PlusCount","TotalCatch","CommonName","Length")]
test_counts=dplyr::sample_n(fnew_allfish,3)
unique(test_counts$SampleID)#Manually check that these are correct vs fnew_counts file
#Use these to manually check that lengths and counts are the same between the two files. One has been manipulated and the other is original.
check1<-subset(fnew_counts, fnew_counts$SampleID=="LAMOPE03-TULE-22DEC2023"|fnew_counts$SampleID=="LAMOPE01-LIBE-08MAR2023"|fnew_counts$SampleID=="BEASEI02-BRAD-09MAY2023")
check2<-subset(fnew_allfish, fnew_allfish$SampleID=="LAMOPE03-TULE-22DEC2023"|fnew_allfish$SampleID=="LAMOPE01-LIBE-08MAR2023"|fnew_allfish$SampleID=="BEASEI02-BRAD-09MAY2023")
##### ^^^ FROM Christy's code #####################################################################
fish_notes<-dplyr::full_join(fnew_allfish, test_fishnotes, by=c("SampleID","Length","CommonName"))
fish_EDI.2023<-dplyr::full_join(TotalCPUE5, fish_notes, by="SampleID")
fish_EDI.2023$LAB_NAME<-"FRP"
fish_EDI.2023.2<-fish_EDI.2023[,c("Comments", "CommonName","Length","Count", "Date", "DepthOfWater", "effort", "FishLengthComments", "GearTypeAbbreviation", "LAB_NAME", "LatitudeEnd", "LatitudeStart", "LengthOfTrawl", "Location", "LongitudeEnd", "LongitudeStart", "NetMeterEnd", "NetMeterStart", "PercentOpen", "SampleID", "SampleID_key", "SeineCode", "SeineDeploymentType", "StartTime", "TowDirection", "Date", "VisitNo.x", "Width")]
names(fish_EDI.2023.2)[which(colnames(fish_EDI.2023.2)=="VisitNo.x")]<-"VisitNo"
names(fish_EDI.2023.2)[which(colnames(fish_EDI.2023.2)=="FishLengthComments")]<-"FishCatchNotes" #This is done becuase of a weird database export issue. Sometimes the database exports to FishCatchNotes column, but always exports to FishLengthComments column. There are a handfull of duplicate comments in the FishCatchNotes column, but all are present in the other. Past years we used FishCatchNotes so renaming to match. Need to fix in previous years.
#write.csv(fish.comp, "fish.comp.csv")
write.csv(fish7, file=here::here("Export.Files", paste('fish.comp.EDI',"_", Sys.Date(),'.csv', sep = '')))
View(fish7)
View(fish_EDI.2023.2)
# Clear environment
rm(list = ls(all.names = TRUE)) #will clear all objects includes hidden objects.
load(here::here("RData","fish_prep_code_13.RData"))
View(f2)
View(TotalCPUE4)
# Clear environment
rm(list = ls(all.names = TRUE)) #will clear all objects includes hidden objects.
load(here::here("RData","fish_prep_code_13.RData"))
fish3<-read.csv(here::here("GitHub/AnnualReport_2022/AnnualBook_2022/imports_ED/working","Invertebrate_30AUG2024.csv"))
fish3<-read.csv(here::here("GitHub/AnnualReport_2022/AnnualBook_2022/imports_ED/working","fish.comp_2024-01-31.csv"))
fish3<-read.csv(here::here("C:/Users/edavidson/GitHub/AnnualReport_2022/AnnualBook_2022/imports_ED/working","fish.comp_2024-01-31.csv"))
TotalCPUE4<-read.csv(here::here("C:/Users/edavidson/GitHub/AnnualReport_2022/AnnualBook_2022/imports_ED/working","TotalCPUE4_2024-01-31.csv"))
fish7 <- fish3
TotalCPUE5 <-TotalCPUE4
#Below is to import 2022 data to fix a problem with FishLength Comments.
fish3<-read.csv(here::here("C:/Users/edavidson/GitHub/AnnualReport_2022/AnnualBook_2022/imports_ED/working","fish.comp_2024-01-31.csv"))
TotalCPUE4<-read.csv(here::here("C:/Users/edavidson/GitHub/AnnualReport_2022/AnnualBook_2022/imports_ED/working","TotalCPUE4_2024-01-31.csv"))
fish7 <- fish3
TotalCPUE5 <-TotalCPUE4
test_fishnotes<- fish6[,c("VisitNo","SampleID_frp","CommonName","FishLength","FishLengthComments","FishCatchNotes")]
#test the merge
###How do we identify which SampleIDs are found in 1 dataset and not the other?
`%!in%` = Negate(`%in%`) ##Run this line of code to create our own function which is %!in$; this function tells us what objects are not found in common between 2 vectors
(fish7$SampleID_key) ##A vector of  SampleIDs found in dataframe x.3
(TotalCPUE5$SampleID_key) ##A vector of  SampleIDs found in dataframe y.3
test1=fish7[which(fish7$SampleID_key %!in% TotalCPUE5$SampleID_key),] ##This function tells me that no SampleID_key is found in fish1 but not found in catch1
# 0 - ED 26JUN2024
test2=TotalCPUE5[which(TotalCPUE5$SampleID_key %!in% fish7$SampleID_key),] ##This function tells me that no SampleID_key is found in fish1 but not found in catch1
fish7 <- fish7[,c("SampleID_key","CommonName","FishLength", "PlusCount","TotalCatch",  "FishLengthComments","EntryOrder")]
TotalCPUE5 <- TotalCPUE5[,c("VisitNo","SampleID_key", "SampleID_frp", "StartTime", "EndTime","Duration", "LatitudeStart","LatitudeEnd",	"LongitudeStart","LongitudeEnd","DepthMeters", "NetMeterStart", "NetMeterEnd", "TowDirection", "SeineCode","SeineDeploymentType", "LengthOfTrawl", "Width","PercentOpen", "GearTypeAbbreviation", "volume","Location","Visit.Date2", "Comments")]
fish_FRP2023<- merge(TotalCPUE5, fish7, by="SampleID_key", all.x = T)
fish_FRP2023$LAB_NAME<-"FRP"
fish_FRP2023 <- fish_FRP2023[,c("VisitNo","SampleID_key", "SampleID_frp","CommonName", "FishLength", "PlusCount","TotalCatch","StartTime", "EndTime","Duration", "LatitudeStart","LatitudeEnd",	"LongitudeStart","LongitudeEnd","DepthMeters","NetMeterEnd", "TowDirection","NetMeterStart", "SeineCode","SeineDeploymentType", "LengthOfTrawl", "Width","PercentOpen", "GearTypeAbbreviation", "volume","LAB_NAME", "Location","Visit.Date2", "Comments" ,"FishLengthComments")]
# Change column names
names(fish_FRP2023)[which(colnames(fish_FRP2023)=="SampleID_frp")]<-"SampleID"
names(TotalCPUE5)[which(colnames(TotalCPUE5)=="SampleID_frp")]<-"SampleID"
names(test_fishnotes)[which(colnames(test_fishnotes)=="SampleID_frp")]<-"SampleID"
names(fish_FRP2023)[which(colnames(fish_FRP2023)=="DepthMeters")]<-"DepthOfWater"
names(TotalCPUE5)[which(colnames(TotalCPUE5)=="DepthMeters")]<-"DepthOfWater"
names(fish_FRP2023)[which(colnames(fish_FRP2023)=="Visit.Date2")]<-"Date"
names(TotalCPUE5)[which(colnames(TotalCPUE5)=="Visit.Date2")]<-"Date"
names(fish_FRP2023)[which(colnames(fish_FRP2023)=="volume")]<-"effort"
names(TotalCPUE5)[which(colnames(TotalCPUE5)=="volume")]<-"effort"
names(fish_FRP2023)[which(colnames(fish_FRP2023)=="FishLength")]<-"Length"
names(TotalCPUE5)[which(colnames(TotalCPUE5)=="FishLength")]<-"Length"
names(test_fishnotes)[which(colnames(test_fishnotes)=="FishLength")]<-"Length"
##### FROM Christy's code #####################################################################
fnew<- fish_FRP2023
fnew$Count<-NA
#fix 2022 and 2023 data
#separate non measured taxa, where length = NA
fnew_invert<-fnew
#FIX ERROR IN COUNT FOR MEASURED FISH IN 2022 and 2023
#separate nonmeasured and measured taxa, create a file for each
unique(fnew$Length) #numbers and NA
sort(unique(fnew$Length)) #no zeros, all reasonable lengths
fnew_fishnotmeasured<- fnew[is.na(fnew$Length),] #these are good to go with current counts
sort(unique(fnew_fishnotmeasured$CommonName))
fnew_fishmeasured<- fnew[!is.na(fnew$Length),] #all are fish
sort(unique(fnew_fishmeasured$CommonName))
#check didn't lose records- must be zero
nrow(fnew)-nrow(fnew_fishmeasured)-nrow(fnew_fishnotmeasured)
#make a file of sample info (not count and length) to remerge with count-taxonomy files later.
fnew2<-fnew[,c("Comments", "CommonName", "Date", "DepthOfWater", "effort", "FishLengthComments", "GearTypeAbbreviation", "LAB_NAME", "LatitudeEnd", "LatitudeStart", "LengthOfTrawl", "Location", "LongitudeEnd", "LongitudeStart", "NetMeterEnd", "NetMeterStart", "PercentOpen", "SampleID", "SampleID_key", "SeineCode", "SeineDeploymentType", "StartTime", "TowDirection", "Date", "VisitNo", "Width")] #FIX ADD ENDTIME AND DURATION, and in above code too
fnew2<-unique.data.frame(fnew2)
nrow(fnew2) #1126 sampleID x commonnames (with measured and not measured)
#Fish not measured
sort(unique(fnew_fishnotmeasured$CommonName)) #mostly inverts, only fish are a mosquitofish that escaped and Silverside unids and jumpy carp that weren't measured- should be good
fnew_fishnotmeasured<-subset(fnew_fishnotmeasured, select=c(SampleID, CommonName, PlusCount)) #CHECK COUNT IS ACTUALLY PLUS COUNT. EMMA SAYS PLUS COUNT SHOULD BE PLUS COUNT.
fnew_fishnotmeasured$Length<-NA
#Measured fish- will create files for plus count and measured
#calculate number of lengths per taxa per sampleID
fnew_fishmeasured_n<-aggregate(x=fnew_fishmeasured$Length,
by=list(fnew_fishmeasured$SampleID,
fnew_fishmeasured$CommonName),
FUN=length)
fnew_fishmeasured_n$SampleID<-fnew_fishmeasured_n$Group.1
fnew_fishmeasured_n$CommonName<-fnew_fishmeasured_n$Group.2
#1098 combinations of SampleID-CommonName (of measured fish)
#Make a file with one row for each sampleID-CommonName
fnew_fishmeasured_plus<-subset(fnew_fishmeasured, select = c(SampleID, CommonName, Count, PlusCount))
fnew_fishmeasured_plus<-unique.data.frame(fnew_fishmeasured_plus)
fnew_fishmeasured_plus<-dplyr::full_join(fnew_fishmeasured_plus, fnew_fishmeasured_n)#, #by=join_by(SampleID==Group.1,CommonName==Group.2))## Is this the best way to join these? -ECM 23DEC2024
#Check the actual number of measured fish (from aggregate) is the same as count-plus count.
fnew_fishmeasured_plus$test<-fnew_fishmeasured_plus$Count-fnew_fishmeasured_plus$PlusCount-fnew_fishmeasured_plus$x #All are zero, except two records with a plus count=NA where all fish are measured
unique(fnew_fishmeasured_plus$test)
#Need to separate fish into two files: One file (fnew_fishmeasured_plus) with nonmeasured fish and a count that's equal to the plus count (fnew_fishmeasured_only). A second file will have all measured fish, with a count of 1
fnew_fishmeasured_plus$countnew<-fnew_fishmeasured_plus$PlusCount
#drop NAs
fnew_fishmeasured_plus<-fnew_fishmeasured_plus[!is.na(fnew_fishmeasured_plus$countnew),]
#drop if all fish are measured (newcount is zero)
fnew_fishmeasured_plus<-fnew_fishmeasured_plus[(fnew_fishmeasured_plus$countnew >0),]
fnew_fishmeasured_plus$Count<-NULL
fnew_fishmeasured_plus$Count<-fnew_fishmeasured_plus$countnew
fnew_fishmeasured_plus<-subset(fnew_fishmeasured_plus, select=c(SampleID, CommonName, Count))
fnew_fishmeasured_plus$Length<-NA
#Limit to measured fish only and make counts 1
fnew_fishmeasured_only<- fnew_fishmeasured[(fnew_fishmeasured$Length>0),]
fnew_fishmeasured_only$Count<-NULL
fnew_fishmeasured_only$Count<-1
fnew_fishmeasured_only<-subset(fnew_fishmeasured_only, select=c(SampleID, CommonName, Length, Count))
#merge files- nonmeasured taxa, measured fish, and plus count measure fish
nrow(fnew) #4266
nrow(fnew2) #1126
nrow(fnew_fishnotmeasured) #443
nrow(fnew_fishmeasured_plus) #61
nrow(fnew_fishmeasured_only) #3823
names(fnew_fishnotmeasured)[which(colnames(fnew_fishnotmeasured)=="PlusCount")]<-"Count"
fnew_allfish<-rbind(fnew_fishnotmeasured, fnew_fishmeasured_plus, fnew_fishmeasured_only)
fnew3<-dplyr::full_join(fnew_allfish, fnew2)
nrow(fnew3) #7520
nrow(fnew3)-nrow(fnew)-nrow(fnew_fishmeasured_plus)
#FIX_ FIGURE OUT MATH FOR NUMBER OF ROWS CHANGED WHEN ADJUSTING PLUS COUNT/COUNT/LENGTHS
#Adding rows- number of new rows is equal to #plus count fish species with measured and nonmeasured fish- ADD CODE TO CALCULATE
fnew_counts<-fnew[,c("SampleID","PlusCount","TotalCatch","CommonName","Length")]
test_counts=dplyr::sample_n(fnew_allfish,3)
unique(test_counts$SampleID)#Manually check that these are correct vs fnew_counts file
#Use these to manually check that lengths and counts are the same between the two files. One has been manipulated and the other is original.
check1<-subset(fnew_counts, fnew_counts$SampleID=="LAMOPE03-TULE-22DEC2023"|fnew_counts$SampleID=="LAMOPE01-LIBE-08MAR2023"|fnew_counts$SampleID=="BEASEI02-BRAD-09MAY2023")
#Use these to manually check that lengths and counts are the same between the two files. One has been manipulated and the other is original.
check1<-subset(fnew_counts, fnew_counts$SampleID=="LAMOPE04-LOWE-04MAY2022"|fnew_counts$SampleID=="LAMOPE01-BROA-17NOV2022"|fnew_counts$SampleID=="LAMOPE08-WING-27APR2022")
#Use these to manually check that lengths and counts are the same between the two files. One has been manipulated and the other is original.
check1<-subset(fnew_counts, fnew_counts$SampleID=="LAMOPE04-LOWE-04MAY2022"|fnew_counts$SampleID=="LAMOPE01-BROA-17NOV2022"|fnew_counts$SampleID=="LAMOPE08-WING-27APR2022")
check2<-subset(fnew_allfish, fnew_allfish$SampleID=="LAMOPE04-LOWE-04MAY2022"|fnew_allfish$SampleID=="LAMOPE01-BROA-17NOV2022"|fnew_allfish$SampleID=="LAMOPE08-WING-27APR2022")
View(check1)
View(check2)
View(fnew_allfish)
#Below is to import 2022 data to fix a problem with FishLength Comments.
fish3<-read.csv(here::here("C:/Users/edavidson/GitHub/AnnualReport_2022/AnnualBook_2022/imports_ED/working","fish3_2025-02-03.csv"))
#Below is to import 2022 data to fix a problem with FishLength Comments.
fish3<-read.csv(here::here("C:/Users/edavidson/GitHub/AnnualReport_2022/AnnualBook_2022/imports_ED/Prep/Export.Files","fish3_2025-02-03.csv"))
TotalCPUE4<-read.csv(here::here("C:/Users/edavidson/GitHub/AnnualReport_2022/AnnualBook_2022/imports_ED/working","TotalCPUE4_2024-01-31.csv"))
fish7 <- fish3
TotalCPUE5 <-TotalCPUE4
test_fishnotes<- fish6[,c("VisitNo","SampleID_frp","CommonName","FishLength","FishLengthComments","FishCatchNotes")]
#test the merge
###How do we identify which SampleIDs are found in 1 dataset and not the other?
`%!in%` = Negate(`%in%`) ##Run this line of code to create our own function which is %!in$; this function tells us what objects are not found in common between 2 vectors
(fish7$SampleID_key) ##A vector of  SampleIDs found in dataframe x.3
(TotalCPUE5$SampleID_key) ##A vector of  SampleIDs found in dataframe y.3
test1=fish7[which(fish7$SampleID_key %!in% TotalCPUE5$SampleID_key),] ##This function tells me that no SampleID_key is found in fish1 but not found in catch1
# 0 - ED 26JUN2024
test2=TotalCPUE5[which(TotalCPUE5$SampleID_key %!in% fish7$SampleID_key),] ##This function tells me that no SampleID_key is found in fish1 but not found in catch1
fish7 <- fish7[,c("SampleID_key","CommonName","FishLength", "PlusCount","TotalCatch",  "FishLengthComments","EntryOrder")]
TotalCPUE5 <- TotalCPUE5[,c("VisitNo","SampleID_key", "SampleID_frp", "StartTime", "EndTime","Duration", "LatitudeStart","LatitudeEnd",	"LongitudeStart","LongitudeEnd","DepthMeters", "NetMeterStart", "NetMeterEnd", "TowDirection", "SeineCode","SeineDeploymentType", "LengthOfTrawl", "Width","PercentOpen", "GearTypeAbbreviation", "volume","Location","Visit.Date2", "Comments")]
fish_FRP2023<- merge(TotalCPUE5, fish7, by="SampleID_key", all.x = T)
fish_FRP2023$LAB_NAME<-"FRP"
fish_FRP2023 <- fish_FRP2023[,c("VisitNo","SampleID_key", "SampleID_frp","CommonName", "FishLength", "PlusCount","TotalCatch","StartTime", "EndTime","Duration", "LatitudeStart","LatitudeEnd",	"LongitudeStart","LongitudeEnd","DepthMeters","NetMeterEnd", "TowDirection","NetMeterStart", "SeineCode","SeineDeploymentType", "LengthOfTrawl", "Width","PercentOpen", "GearTypeAbbreviation", "volume","LAB_NAME", "Location","Visit.Date2", "Comments" ,"FishLengthComments")]
# Change column names
names(fish_FRP2023)[which(colnames(fish_FRP2023)=="SampleID_frp")]<-"SampleID"
names(TotalCPUE5)[which(colnames(TotalCPUE5)=="SampleID_frp")]<-"SampleID"
names(test_fishnotes)[which(colnames(test_fishnotes)=="SampleID_frp")]<-"SampleID"
names(fish_FRP2023)[which(colnames(fish_FRP2023)=="DepthMeters")]<-"DepthOfWater"
names(TotalCPUE5)[which(colnames(TotalCPUE5)=="DepthMeters")]<-"DepthOfWater"
names(fish_FRP2023)[which(colnames(fish_FRP2023)=="Visit.Date2")]<-"Date"
names(TotalCPUE5)[which(colnames(TotalCPUE5)=="Visit.Date2")]<-"Date"
names(fish_FRP2023)[which(colnames(fish_FRP2023)=="volume")]<-"effort"
names(TotalCPUE5)[which(colnames(TotalCPUE5)=="volume")]<-"effort"
names(fish_FRP2023)[which(colnames(fish_FRP2023)=="FishLength")]<-"Length"
names(TotalCPUE5)[which(colnames(TotalCPUE5)=="FishLength")]<-"Length"
names(test_fishnotes)[which(colnames(test_fishnotes)=="FishLength")]<-"Length"
##### FROM Christy's code #####################################################################
fnew<- fish_FRP2023
fnew$Count<-NA
#fix 2022 and 2023 data
#separate non measured taxa, where length = NA
fnew_invert<-fnew
#FIX ERROR IN COUNT FOR MEASURED FISH IN 2022 and 2023
#separate nonmeasured and measured taxa, create a file for each
unique(fnew$Length) #numbers and NA
sort(unique(fnew$Length)) #no zeros, all reasonable lengths
fnew_fishnotmeasured<- fnew[is.na(fnew$Length),] #these are good to go with current counts
sort(unique(fnew_fishnotmeasured$CommonName))
fnew_fishmeasured<- fnew[!is.na(fnew$Length),] #all are fish
sort(unique(fnew_fishmeasured$CommonName))
#check didn't lose records- must be zero
nrow(fnew)-nrow(fnew_fishmeasured)-nrow(fnew_fishnotmeasured)
#make a file of sample info (not count and length) to remerge with count-taxonomy files later.
fnew2<-fnew[,c("Comments", "CommonName", "Date", "DepthOfWater", "effort", "FishLengthComments", "GearTypeAbbreviation", "LAB_NAME", "LatitudeEnd", "LatitudeStart", "LengthOfTrawl", "Location", "LongitudeEnd", "LongitudeStart", "NetMeterEnd", "NetMeterStart", "PercentOpen", "SampleID", "SampleID_key", "SeineCode", "SeineDeploymentType", "StartTime", "TowDirection", "Date", "VisitNo", "Width")] #FIX ADD ENDTIME AND DURATION, and in above code too
fnew2<-unique.data.frame(fnew2)
nrow(fnew2) #1126 sampleID x commonnames (with measured and not measured)
#Fish not measured
sort(unique(fnew_fishnotmeasured$CommonName)) #mostly inverts, only fish are a mosquitofish that escaped and Silverside unids and jumpy carp that weren't measured- should be good
fnew_fishnotmeasured<-subset(fnew_fishnotmeasured, select=c(SampleID, CommonName, PlusCount)) #CHECK COUNT IS ACTUALLY PLUS COUNT. EMMA SAYS PLUS COUNT SHOULD BE PLUS COUNT.
fnew_fishnotmeasured$Length<-NA
#Measured fish- will create files for plus count and measured
#calculate number of lengths per taxa per sampleID
fnew_fishmeasured_n<-aggregate(x=fnew_fishmeasured$Length,
by=list(fnew_fishmeasured$SampleID,
fnew_fishmeasured$CommonName),
FUN=length)
fnew_fishmeasured_n$SampleID<-fnew_fishmeasured_n$Group.1
fnew_fishmeasured_n$CommonName<-fnew_fishmeasured_n$Group.2
#1098 combinations of SampleID-CommonName (of measured fish)
#Make a file with one row for each sampleID-CommonName
fnew_fishmeasured_plus<-subset(fnew_fishmeasured, select = c(SampleID, CommonName, Count, PlusCount))
fnew_fishmeasured_plus<-unique.data.frame(fnew_fishmeasured_plus)
fnew_fishmeasured_plus<-dplyr::full_join(fnew_fishmeasured_plus, fnew_fishmeasured_n)#, #by=join_by(SampleID==Group.1,CommonName==Group.2))## Is this the best way to join these? -ECM 23DEC2024
#Check the actual number of measured fish (from aggregate) is the same as count-plus count.
fnew_fishmeasured_plus$test<-fnew_fishmeasured_plus$Count-fnew_fishmeasured_plus$PlusCount-fnew_fishmeasured_plus$x #All are zero, except two records with a plus count=NA where all fish are measured
unique(fnew_fishmeasured_plus$test)
#Need to separate fish into two files: One file (fnew_fishmeasured_plus) with nonmeasured fish and a count that's equal to the plus count (fnew_fishmeasured_only). A second file will have all measured fish, with a count of 1
fnew_fishmeasured_plus$countnew<-fnew_fishmeasured_plus$PlusCount
#drop NAs
fnew_fishmeasured_plus<-fnew_fishmeasured_plus[!is.na(fnew_fishmeasured_plus$countnew),]
#drop if all fish are measured (newcount is zero)
fnew_fishmeasured_plus<-fnew_fishmeasured_plus[(fnew_fishmeasured_plus$countnew >0),]
fnew_fishmeasured_plus$Count<-NULL
fnew_fishmeasured_plus$Count<-fnew_fishmeasured_plus$countnew
fnew_fishmeasured_plus<-subset(fnew_fishmeasured_plus, select=c(SampleID, CommonName, Count))
fnew_fishmeasured_plus$Length<-NA
#Limit to measured fish only and make counts 1
fnew_fishmeasured_only<- fnew_fishmeasured[(fnew_fishmeasured$Length>0),]
fnew_fishmeasured_only$Count<-NULL
fnew_fishmeasured_only$Count<-1
fnew_fishmeasured_only<-subset(fnew_fishmeasured_only, select=c(SampleID, CommonName, Length, Count))
#merge files- nonmeasured taxa, measured fish, and plus count measure fish
nrow(fnew) #4266
nrow(fnew2) #1126
nrow(fnew_fishnotmeasured) #443
nrow(fnew_fishmeasured_plus) #61
nrow(fnew_fishmeasured_only) #3823
names(fnew_fishnotmeasured)[which(colnames(fnew_fishnotmeasured)=="PlusCount")]<-"Count"
fnew_allfish<-rbind(fnew_fishnotmeasured, fnew_fishmeasured_plus, fnew_fishmeasured_only)
fnew3<-dplyr::full_join(fnew_allfish, fnew2)
nrow(fnew3) #7520
nrow(fnew3)-nrow(fnew)-nrow(fnew_fishmeasured_plus)
#FIX_ FIGURE OUT MATH FOR NUMBER OF ROWS CHANGED WHEN ADJUSTING PLUS COUNT/COUNT/LENGTHS
#Adding rows- number of new rows is equal to #plus count fish species with measured and nonmeasured fish- ADD CODE TO CALCULATE
fnew_counts<-fnew[,c("SampleID","PlusCount","TotalCatch","CommonName","Length")]
test_counts=dplyr::sample_n(fnew_allfish,3)
unique(test_counts$SampleID)#Manually check that these are correct vs fnew_counts file
#Use these to manually check that lengths and counts are the same between the two files. One has been manipulated and the other is original.
check1<-subset(fnew_counts, fnew_counts$SampleID=="LAMOPE05-WINT-17NOV2022"|fnew_counts$SampleID=="BEASEI03-HORS-30NOV2022"|fnew_counts$SampleID=="LAMOPE03-LOWE-04MAY2022")
check2<-subset(fnew_allfish, fnew_allfish$SampleID=="LAMOPE05-WINT-17NOV2022"|fnew_allfish$SampleID=="BEASEI03-HORS-30NOV2022"|fnew_allfish$SampleID=="LAMOPE03-LOWE-04MAY2022")
View(check1)
##### ^^^ FROM Christy's code #####################################################################
fish_notes<-dplyr::full_join(fnew_allfish, test_fishnotes, by=c("SampleID","Length","CommonName"))
fish_EDI.2023<-dplyr::full_join(TotalCPUE5, fish_notes, by="SampleID")
fish_EDI.2023$LAB_NAME<-"FRP"
fish_EDI.2023.2<-fish_EDI.2023[,c("Comments", "CommonName","Length","Count", "Date", "DepthOfWater", "effort", "FishLengthComments", "GearTypeAbbreviation", "LAB_NAME", "LatitudeEnd", "LatitudeStart", "LengthOfTrawl", "Location", "LongitudeEnd", "LongitudeStart", "NetMeterEnd", "NetMeterStart", "PercentOpen", "SampleID", "SampleID_key", "SeineCode", "SeineDeploymentType", "StartTime", "TowDirection", "Date", "VisitNo.x", "Width")]
names(fish_EDI.2023.2)[which(colnames(fish_EDI.2023.2)=="VisitNo.x")]<-"VisitNo"
names(fish_EDI.2023.2)[which(colnames(fish_EDI.2023.2)=="FishLengthComments")]<-"FishCatchNotes" #This is done becuase of a weird database export issue. Sometimes the database exports to FishCatchNotes column, but always exports to FishLengthComments column. There are a handfull of duplicate comments in the FishCatchNotes column, but all are present in the other. Past years we used FishCatchNotes so renaming to match. Need to fix in previous years.
#write.csv(fish.comp, "fish.comp.csv")
write.csv(fish7, file=here::here("Export.Files", paste('fish.comp.EDI',"_", Sys.Date(),'.csv', sep = '')))
#write.csv(fish.comp, "fish.comp.csv")
write.csv(fish7, file=here::here("Export.Files", paste('2022.fish.comp.EDI',"_", Sys.Date(),'.csv', sep = '')))
#write.csv(TotalCPUE4, "TotalCPUE4.csv")
write.csv(TotalCPUE5, file=here::here("Export.Files", paste('2022.TotalCPUE5.EDI',"_", Sys.Date(),'.csv', sep = '')))
#Fish EDI file
write.csv(fish_EDI.2023.2, file=here::here("Export.Files", paste('2022.fish.FRP.EDI',"_", Sys.Date(),'.csv', sep = '')))
#write.csv(fish.comp, "fish.comp.csv")
write.csv(fish7, file=here::here("Export.Files", paste('2022.fish.comp.EDI',"_", Sys.Date(),'.csv', sep = '')))
#write.csv(TotalCPUE4, "TotalCPUE4.csv")
write.csv(TotalCPUE5, file=here::here("Export.Files", paste('2022.TotalCPUE5.EDI',"_", Sys.Date(),'.csv', sep = '')))
#Fish EDI file
write.csv(fish_EDI.2023.2, file=here::here("Export.Files", paste('2022.fish.FRP.EDI',"_", Sys.Date(),'.csv', sep = '')))
gc()
library(readxl)
library(dplyr)
library(lubridate)
update.packages()
