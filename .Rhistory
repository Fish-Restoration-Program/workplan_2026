### Combine catch and fish sample data
#
library(readxl)
#Add species
org <- read.csv(here::here("working","OrganismCode_ZooCodes_Merged_09JAN2024.csv"))
names(org)[which(colnames(org)=="ï..OrganismID")]<-"OrganismID"
#test the merge
###How do we identify which SampleIDs are found in 1 dataset and not the other?
`%!in%` = Negate(`%in%`) ##Run this line of code to create our own function which is %!in$; this function tells us what objects are not found in common between 2 vectors
(fish1$SampleID_key) ##A vector of  SampleIDs found in dataframe x.3
(catch1$SampleID_key) ##A vector of  SampleIDs found in dataframe y.3
test1=fish1[which(fish1$SampleID_key %!in% catch1$SampleID_key),] ##This function tells me that no SampleID_key is found in fish1 but not found in catch1
#merge fish data with site and sample data
fish2<-merge(fish1, catch1, by.x = "SampleID_key", all.x= T)
#test the merge
test1=fish_in_inverts[which(fish_in_inverts$SampleID_key %!in% catch1$SampleID_key),] ##This function tells me that there are SampleID_key found in fish_in_invert but not found in catch1
fish_in_inverts2 <-merge(fish_in_inverts, catch1, by.x = "SampleID_key")
#test the merge
test1=fish2[which(fish2$OrganismId %!in% org$OrganismID),] ##This function tells me that no OrganismIDs are found in fish2 but not found in org
View(test1)
# Clear environment
rm(list = ls(all.names = TRUE)) #will clear all objects includes hidden objects.
load(here::here("RData","fish_prep_code_11.RData"))
################################################# add catch ##########################################
#Import db export file for fish catch
catch1 <- read.csv(here::here("working","Fish_01FEB2024.csv"))
#change column TagSerial to character instead of numeric
class(catch1$TagSerial)
catch1$TagSerial <- as.character(catch1$TagSerial)
#
### Combine catch and fish sample data
#
library(readxl)
#Add species
org <- read.csv(here::here("working","OrganismCode_ZooCodes_Merged_01FEB2024.csv"))
names(org)[which(colnames(org)=="ï..OrganismID")]<-"OrganismID"
#test the merge
###How do we identify which SampleIDs are found in 1 dataset and not the other?
`%!in%` = Negate(`%in%`) ##Run this line of code to create our own function which is %!in$; this function tells us what objects are not found in common between 2 vectors
(fish1$SampleID_key) ##A vector of  SampleIDs found in dataframe x.3
(catch1$SampleID_key) ##A vector of  SampleIDs found in dataframe y.3
test1=fish1[which(fish1$SampleID_key %!in% catch1$SampleID_key),] ##This function tells me that no SampleID_key is found in fish1 but not found in catch1
#merge fish data with site and sample data
fish2<-merge(fish1, catch1, by.x = "SampleID_key", all.x= T)
#test the merge
test1=fish_in_inverts[which(fish_in_inverts$SampleID_key %!in% catch1$SampleID_key),] ##This function tells me that there are SampleID_key found in fish_in_invert but not found in catch1
fish_in_inverts2 <-merge(fish_in_inverts, catch1, by.x = "SampleID_key")
#test the merge
test1=fish2[which(fish2$OrganismId %!in% org$OrganismID),] ##This function tells me that no OrganismIDs are found in fish2 but not found in org
#Add species info to fish data
fish3<-merge(fish2, org, by.x = "OrganismId", by.y = "OrganismID", all.x= T)
#test the merge
test1=fish_in_inverts2[which(fish_in_inverts2$OrganismId %!in% org$OrganismID),] ##This function tells me that no OrganismIDs are found in fish2 but not found in org
fish_in_inverts3<-merge(fish_in_inverts2, org, by.x = "OrganismId", by.y = "OrganismID", all.x= T)
#helps me remember that all fish lengths are in this one
fishlengths <- fish3
fish_inverts_lengths <- fish_in_inverts3
library(dplyr)
#Limit to 1 record for each sample- species combination. (Drops multiple length measurements.)
#one row with counts for each species, not lengths for all
#use catch1 if wanting all length meausurements
catch2 <-catch1 %>% distinct(SampleID_key, OrganismId, .keep_all=TRUE)
#excel file with all fish species and lengths
write.csv(fishlengths, file=here::here("Export.Files", paste('Fish_catch_all', "_",Sys.Date(),".csv", sep = '')))
write.csv(fish_inverts_lengths, file=here::here("Export.Files", paste('Fish__inverts_all_lengths', "_",Sys.Date(),".csv", sep = ''))) #I believe this is the file that gets sent to the invert lead
######COUNT CHECK################
#test the merge
test1=f2[which(f2$SampleID_frp %!in% fish1$SampleID_frp), c("SampleID_frp","VisitNo")] ##This function tells me that no SampleIDs are found in f2 but not found in fish1
#test the merge
test2=fish1[which(fish1$SampleID_frp %!in% f2$SampleID_frp), c("SampleID_frp","VisitNo")] ##This function tells me that no SampleIDs are found in f2 but not found in fish1
#Make fish3 a dataframe
fish3 = data.frame(fish3)
#filter out only chordata (fish)
Chord_only = filter(fish3, fish3$Phylum == "Chordata")
sort(unique(Chord_only$Class))
fish_only = filter(Chord_only, Chord_only$Class != "Amphibia")
sort(unique(fish_only$Class))
Chord_only_inverts = filter(fish_in_inverts3, fish_in_inverts3$Phylum == "Chordata")
sort(unique(Chord_only_inverts$Class))
fish_only_verts = filter(Chord_only_inverts, Chord_only_inverts$Class != "Amphibia")
sort(unique(fish_only_verts$Class))
Chord_only_inverts = filter(fish_in_inverts3, fish_in_inverts3$Phylum == "Chordata")
sort(unique(Chord_only_inverts$Class))
fish_only_inverts = filter(Chord_only_inverts, Chord_only_inverts$Class != "Amphibia")
sort(unique(fish_only_inverts$Class))
library(plyr)
library(dplyr)
# Make the dataframe and calculate count, effort, for each taxa group in a SampleID
#counts_check = summarize(group_by(fish_only, SampleID_frp, OrganismCode),length_count = length(is.na(FishLength)==F))
counts_check = ddply(fish_only, c("SampleID_frp", "OrganismCode"),
summarise,
length_count = length(is.na(FishLength)==F)
)
counts_check_verts = ddply(fish_only_verts, c("SampleID_frp", "OrganismCode"),
summarise,
length_count = length(is.na(FishLength)==F)
)
# add the calculated count to your other data set
fish4 = merge(fish3, counts_check, by=c("SampleID_frp","OrganismCode"), all.x=T)
fish_in_inverts4 = merge(fish_in_inverts3, counts_check_verts, by=c("SampleID_frp","OrganismCode"), all.x=T)
counts_check_inverts = ddply(fish_only_verts, c("SampleID_frp", "OrganismCode"),
summarise,
length_count = length(is.na(FishLength)==F)
)
fish_in_inverts4 = merge(fish_in_inverts3, counts_check_inverts, by=c("SampleID_frp","OrganismCode"), all.x=T)
# Make it so we have one row per sampleid-species combination
fish_test=distinct(fish4,fish4$SampleID_frp, fish4$CommonName, .keep_all = T)
fish_in_verts_test=distinct(fish_in_inverts4,fish_in_inverts4$SampleID_frp, fish_in_inverts4$CommonName, .keep_all = T)
# make a column to hold the check
fish_test$count_check = NA
fish_in_verts_test$count_check = NA
# Calculate the difference
fish_test$count_check = (fish_test$TotalCatch - fish_test$PlusCount-fish_test$length_count)
fish_in_verts_test$count_check = (fish_in_verts_test$TotalCatch - fish_in_verts_test$PlusCount - fish_in_verts_test$length_count)
# Check your results
test_fish_counts = filter(fish_test, fish_test$count != 0)
test_fish_in_verts_counts = filter(fish_in_verts_test, fish_in_verts_test$count != 0)
View(test_fish_counts)
# Clear environment
rm(list = ls(all.names = TRUE)) #will clear all objects includes hidden objects.
load(here::here("RData","fish_prep_code_11.RData"))
################################################# add catch ##########################################
#Import db export file for fish catch
catch1 <- read.csv(here::here("working","Fish_01FEB2024.csv"))
#change column TagSerial to character instead of numeric
class(catch1$TagSerial)
catch1$TagSerial <- as.character(catch1$TagSerial)
#
### Combine catch and fish sample data
#
library(readxl)
#Add species
org <- read.csv(here::here("working","OrganismCode_ZooCodes_Merged_01FEB2024.csv"))
names(org)[which(colnames(org)=="ï..OrganismID")]<-"OrganismID"
#test the merge
###How do we identify which SampleIDs are found in 1 dataset and not the other?
`%!in%` = Negate(`%in%`) ##Run this line of code to create our own function which is %!in$; this function tells us what objects are not found in common between 2 vectors
(fish1$SampleID_key) ##A vector of  SampleIDs found in dataframe x.3
(catch1$SampleID_key) ##A vector of  SampleIDs found in dataframe y.3
test1=fish1[which(fish1$SampleID_key %!in% catch1$SampleID_key),] ##This function tells me that no SampleID_key is found in fish1 but not found in catch1
#merge fish data with site and sample data
fish2<-merge(fish1, catch1, by.x = "SampleID_key", all.x= T)
#test the merge
test1=fish_in_inverts[which(fish_in_inverts$SampleID_key %!in% catch1$SampleID_key),] ##This function tells me that there are SampleID_key found in fish_in_invert but not found in catch1
fish_in_inverts2 <-merge(fish_in_inverts, catch1, by.x = "SampleID_key")
#test the merge
test1=fish2[which(fish2$OrganismId %!in% org$OrganismID),] ##This function tells me that no OrganismIDs are found in fish2 but not found in org
#Add species info to fish data
fish3<-merge(fish2, org, by.x = "OrganismId", by.y = "OrganismID", all.x= T)
#test the merge
test1=fish_in_inverts2[which(fish_in_inverts2$OrganismId %!in% org$OrganismID),] ##This function tells me that no OrganismIDs are found in fish2 but not found in org
fish_in_inverts3<-merge(fish_in_inverts2, org, by.x = "OrganismId", by.y = "OrganismID", all.x= T)
#helps me remember that all fish lengths are in this one
fishlengths <- fish3
fish_inverts_lengths <- fish_in_inverts3
library(dplyr)
#Limit to 1 record for each sample- species combination. (Drops multiple length measurements.)
#one row with counts for each species, not lengths for all
#use catch1 if wanting all length meausurements
catch2 <-catch1 %>% distinct(SampleID_key, OrganismId, .keep_all=TRUE)
#excel file with all fish species and lengths
write.csv(fishlengths, file=here::here("Export.Files", paste('Fish_catch_all', "_",Sys.Date(),".csv", sep = '')))
write.csv(fish_inverts_lengths, file=here::here("Export.Files", paste('Fish__inverts_all_lengths', "_",Sys.Date(),".csv", sep = ''))) #I believe this is the file that gets sent to the invert lead
######COUNT CHECK################
#test the merge
test1=f2[which(f2$SampleID_frp %!in% fish1$SampleID_frp), c("SampleID_frp","VisitNo")] ##This function tells me that no SampleIDs are found in f2 but not found in fish1
#test the merge
test2=fish1[which(fish1$SampleID_frp %!in% f2$SampleID_frp), c("SampleID_frp","VisitNo")] ##This function tells me that no SampleIDs are found in f2 but not found in fish1
#Make fish3 a dataframe
fish3 = data.frame(fish3)
#filter out only chordata (fish)
Chord_only = filter(fish3, fish3$Phylum == "Chordata")
sort(unique(Chord_only$Class))
fish_only = filter(Chord_only, Chord_only$Class != "Amphibia")
sort(unique(fish_only$Class))
Chord_only_inverts = filter(fish_in_inverts3, fish_in_inverts3$Phylum == "Chordata")
sort(unique(Chord_only_inverts$Class))
fish_only_inverts = filter(Chord_only_inverts, Chord_only_inverts$Class != "Amphibia")
sort(unique(fish_only_inverts$Class))
library(plyr)
library(dplyr)
# Make the dataframe and calculate count, effort, for each taxa group in a SampleID
#counts_check = summarize(group_by(fish_only, SampleID_frp, OrganismCode),length_count = length(is.na(FishLength)==F))
counts_check = ddply(fish_only, c("SampleID_frp", "OrganismCode"),
summarise,
length_count = length(is.na(FishLength)==F)
)
counts_check_inverts = ddply(fish_only_verts, c("SampleID_frp", "OrganismCode"),
summarise,
length_count = length(is.na(FishLength)==F)
)
counts_check_inverts = ddply(fish_only_inverts, c("SampleID_frp", "OrganismCode"),
summarise,
length_count = length(is.na(FishLength)==F)
)
counts_check_inverts = ddply(fish_only_inverts, c("SampleID_frp", "OrganismCode"),
summarise,
length_count = length(is.na(FishLength)==F)
)
# add the calculated count to your other data set
fish4 = merge(fish3, counts_check, by=c("SampleID_frp","OrganismCode"), all.x=T)
fish_in_inverts4 = merge(fish_in_inverts3, counts_check_inverts, by=c("SampleID_frp","OrganismCode"), all.x=T)
# Make it so we have one row per sampleid-species combination
fish_test=distinct(fish4,fish4$SampleID_frp, fish4$CommonName, .keep_all = T)
fish_in_verts_test=distinct(fish_in_inverts4,fish_in_inverts4$SampleID_frp, fish_in_inverts4$CommonName, .keep_all = T)
# make a column to hold the check
fish_test$count_check = NA
fish_in_verts_test$count_check = NA
# Calculate the difference
fish_test$count_check = (fish_test$TotalCatch - fish_test$PlusCount-fish_test$length_count)
fish_in_verts_test$count_check = (fish_in_verts_test$TotalCatch - fish_in_verts_test$PlusCount - fish_in_verts_test$length_count)
View(fish_only_inverts)
# Check your results
test_fish_counts = filter(fish_test, fish_test$count != 0)
test_fish_in_verts_counts = filter(fish_in_verts_test, fish_in_verts_test$count != 0)
View(test_fish_counts)
#export and correct any fish counts that are wrong
write.csv(test_fish_counts, file = here::here("Export.Files","Data.Checks", paste('fish_count_check', "_",Sys.Date(),".csv", sep = '')))
write.csv(test_fish_in_verts_counts, file = here::here("Export.Files","Data.Checks", paste('fish_in_verts_count_check', "_",Sys.Date(),".csv", sep = '')))
save(list=ls(),file= here::here("RData","fish_prep_code_12.RData")) #replace list=ls() with names of objects you want to keep, currently keeps all
# Clear environment
rm(list = ls(all.names = TRUE)) #will clear all objects includes hidden objects.
load(here::here("RData","fish_prep_code_12.RData"))
#fish_test is unique sampleID/species combination
fish_test$volume <- as.numeric(fish_test$volume)
#calculate CPUE=(total catch/volume)*10000 by species
fish_test$CPUEbySpp<-((fish_test$TotalCatch/fish_test$volume))*10000
library(dplyr)
library(plyr)
#filter out "" legend_fish to make sure no fish get dropped that you actually want CPUE for
sort(unique(fish_test$Legend_Fish))
test= filter(fish_test[,c("Legend_Fish","CommonName")],fish_test$Legend_Fish=="")
sort(unique(test$CommonName)) # All plus-count-only species/taxa
View(test)
##changes value to a zero if Legend_Fish is na (avoids inverts or nonfish CPUE being counted in total CPUE)
fish_test$CPUEbySpp2<-if_else(is.na(fish_test$Legend_Fish== T)|fish_test$Legend_Fish== "No Catch"|fish_test$Legend_Fish== "", true=0, false=fish_test$CPUEbySpp, missing = 0)
#check that it worked
sort(unique(fish_test$CommonName[which(fish_test$CPUEbySpp2==0)])) #It did!
TotalCPUE = ddply(fish_test, c("SampleID_frp"),
summarise,
tCPUE = sum(CPUEbySpp2)
)
nrow(unique(fish_test[c("SampleID_frp")])) - nrow(TotalCPUE) # should be zero
#test= fish3[which(fish3$SampleID_frp=="BEASEI01-HORS-10NOV2021"),]
#test= fish3[which(fish3$GearTypeAbbreviation=="OTTTRA"),]
fish4=fish_test
#test the merge
test1=fish4[which(fish4$SampleID_frp %!in% TotalCPUE$SampleID_frp), c("SampleID_frp","VisitNo")] ##This function tells me that no SampleIDs are found in fish4 but not found in TotalCPUE
# has one row per species-sampleID combo
fish5<-merge(fish4, TotalCPUE, by = "SampleID_frp", all.x=T)
# do the sampleid #s match up where they should
# Should be zero
nrow(unique(fish_test[c("SampleID_frp", "CommonName")])) - nrow(fish5)
fish5$PercentComp<- fish5$CPUEbySpp2/fish5$tCPUE
fish6 = distinct(fish5, fish5$SampleID_frp,fish5$CommonName,.keep_all = T)
# Same as adult.samp in figure code
TotalCPUE4 <-fish6%>% distinct(SampleID_frp, .keep_all=TRUE)
#write.csv(fish.comp, "fish.comp.csv")
write.csv(fish6, file=here::here("Export.Files", paste('fish.comp',"_", Sys.Date(),'.csv', sep = '')))
#need to eliminate inverts before this file-  replace inverts with no catch and change CPUE to zero
#write.csv(TotalCPUE4, "TotalCPUE4.csv")
write.csv(TotalCPUE4, file=here::here("Export.Files", paste('TotalCPUE4',"_", Sys.Date(),'.csv', sep = '')))
save(list=ls(),file= here::here("RData","fish_prep_code_13.RData")) #replace list=ls() with names of objects you want to keep, currently keeps all
hist(fish5$CPUEbySpp2)
boxplot(fish5$CPUEbySpp2)
boxplot(TotalCPUE4$CPUEbySpp2)
boxplot(fish5$CPUEbySpp2)
# Calculate quantiles for beach seine volumes
quant_fish5 = quantile(fish5$CPUEbySpp2, na.rm=T) # fish5: 0%- 0, 25%- 508, 50%- 2156, 75%- 10989, 100%- 341111
quant_TotalCPUE4 = quantile(TotalCPUE4$CPUEbySpp2, na.rm=T) # TotalCPUE4: 0%- 0, 25%- 2.30e-01, 50%- 7.77e+01, 75%- 3.45e+02, 100%- 3.4e+05
# Store the quantile values for beach seine crew
Q1_fish5 = quant_fish5[2] # Put 25% value here
Q3_fish5 = quant_fish5[4] # Put 75% value here
IQR_fish5 = Q3_fish5 - Q1_fish5
min_fish5 = Q1_fish5 - 1.5*IQR_fish5
max_fish5 = Q3_fish5 + 1.5*IQR_fish5
# Set aside samples which are greater than the max or less than the min
check_fish5 = filter(fish5, fish5$CPUEbySpp2 < min_fish5 | fish5$CPUEbySpp2 > max_fish5)
View(check_fish5)
check_fish5 =check_fish5[,c("SampleID_frp", "Location", "TotalCatch")]
View(check_fish5)
# Set aside samples which are greater than the max or less than the min
check_fish5 = filter(fish5, fish5$CPUEbySpp2 < min_fish5 | fish5$CPUEbySpp2 > max_fish5)
check_fish5 =check_fish5[,c("SampleID_frp", "Location","CommonName", "TotalCatch")]
# Set aside samples which are greater than the max or less than the min
check_fish5 = filter(fish5, fish5$CPUEbySpp2 < min_fish5 | fish5$CPUEbySpp2 > max_fish5)
check_fish5 =check_fish5[,c("SampleID_frp", "Location","CommonName", "TotalCatch","CPUEbySpp2")]
write.csv(check_fish5, "Fish5_CPUE_check.csv")
# Store the quantile values for beach seine crew
Q1_TotalCPUE4 = quant_TotalCPUE4[2] # Put 25% value here
Q3_TotalCPUE4 = quant_TotalCPUE4[4] # Put 75% value here
IQR_TotalCPUE4 = Q3_TotalCPUE4 - Q1_TotalCPUE4
min_TotalCPUE4 = Q1_TotalCPUE4 - 1.5*IQR_TotalCPUE4
max_TotalCPUE4 = Q3_TotalCPUE4 + 1.5*IQR_TotalCPUE4
# Store the quantile values for TotalCPUE4
Q1_TotalCPUE4 = quant_TotalCPUE4[2] # Put 25% value here
Q3_TotalCPUE4 = quant_TotalCPUE4[4] # Put 75% value here
IQR_TotalCPUE4 = Q3_TotalCPUE4 - Q1_TotalCPUE4
min_TotalCPUE4 = Q1_TotalCPUE4 - 1.5*IQR_TotalCPUE4
max_TotalCPUE4 = Q3_TotalCPUE4 + 1.5*IQR_TotalCPUE4
# Set aside samples which are greater than the max or less than the min
check_TotalCPUE4 = filter(TotalCPUE4, TotalCPUE4$CPUEbySpp2 < min_TotalCPUE4 | TotalCPUE4$CPUEbySpp2 > max_TotalCPUE4)
View(check_TotalCPUE4)
check_TotalCPUE4 =check_TotalCPUE4[,c("SampleID_frp", "Location","CommonName", "TotalCatch","CPUEbySpp2")]
# these wont be different unless you changed the data and got back to this step
boxplot(fish5$CPUEbySpp2)
boxplot(TotalCPUE4$CPUEbySpp2)
# This is what the data look like with calculated outliers removed (not necessarily the ones you kept/removed)
test_fish5 = filter(fish5, fish5$CPUEbySpp2 > min_fish5 )
test_fish5 = filter(test_fish5, test_fish5$CPUEbySpp2 < max_fish5)
# This is what the data look like with calculated outliers removed (not necessarily the ones you kept/removed)
test_fish5 = filter(fish5, fish5$CPUEbySpp2 > min_fish5 )
test_fish5 = filter(test_fish5, test_fish5$CPUEbySpp2 < max_fish5)
test_TotalCPUE4 = filter(TotalCPUE4, TotalCPUE4$CPUEbySpp2 > min_TotalCPUE4 )
test_TotalCPUE4 = filter(test_TotalCPUE4, test_TotalCPUE4$CPUEbySpp2 < max_TotalCPUE4)
boxplot(test_fish5$CPUEbySpp2)
boxplot(test_TotalCPUE4$CPUEbySpp2)
save(list=ls(),file= here::here("RData","fish_prep_code_15.RData")) #replace list=ls() with names of objects you want to keep, currently keeps all
################## SPECIES LENGTH CHECKS ##########################
#Get a list of all species in the dataframe
unique(fish5$CommonName)
fish_only = filter(fishlengths, fishlengths$Phylum == "Chordata", fishlengths$Class!= "Amphibia")
fish_in_verts_only = filter(fish_verts_lengths, fish_verts_lengths$Phylum == "Chordata", fish_verts_lengths$Class!= "Amphibia")
fish_only = filter(fishlengths, fishlengths$Phylum == "Chordata", fishlengths$Class!= "Amphibia")
fish_in_verts_only = filter(fish_inverts_lengths, fish_inverts_lengths$Phylum == "Chordata", fish_inverts_lengths$Class!= "Amphibia")
fish_in_mac_only = filter(fish_in_inverts_only, fish_in_inverts_only$GearTypeAbbreviation == "MAC")
fish_in_mac_only = filter(fish_inverts_only, fish_in_inverts_only$GearTypeAbbreviation == "MAC")
fish_in_mac_only = filter(fish_inverts_only, fish_inverts_only$GearTypeAbbreviation == "MAC")
fish_inverts_only = filter(fish_inverts_lengths, fish_inverts_lengths$Phylum == "Chordata", fish_inverts_lengths$Class!= "Amphibia")
fish_in_mac_only = filter(fish_inverts_only, fish_inverts_only$GearTypeAbbreviation == "MAC")
library(ggplot2)
library(viridis)
#Plots multiple small histograms of all species with lengths
#Look for strange values on histograms. For example, a lengtht hat is outside the normal range for a species.
#look for lengths showing up for species that are not measured
ggplot(data=fish_only, aes(x=FishLength)) +
geom_histogram(bins = 15, color = "black", fill = "gray") +
facet_wrap(~CommonName, scales = "free")+
ggtitle("Fish Lengths") +
theme_grey()
Y1 = ggplot(data=fish_only, aes(x=FishLength, fill=Location))
jpeg(file = paste(project,"_",'ALL_ADULT_FISH_HIST_', Sys.Date(),'.jpg', sep = ''),quality=100, width=10,height=6,units='in', res=300)
Y1 = ggplot(data=fish_only, aes(x=FishLength, fill=Location))
jpeg(file = paste(project,"_",'ALL_ADULT_FISH_HIST_', Sys.Date(),'.jpg', sep = ''),quality=100, width=10,height=6,units='in', res=300)
Y1 = ggplot(data=fish_only, aes(x=FishLength, fill=Location))
jpeg(file = paste('ALL_ADULT_FISH_HIST_CHECK', Sys.Date(),'.jpg', sep = ''),quality=100, width=10,height=6,units='in', res=300)
Y1+geom_histogram(bins = 15) +
facet_wrap(~Legend_Fish, scales = "free")+
ggtitle("Fish Lengths All Locations") +
scale_x_continuous(labels = scales::number_format(accuracy = 1))+  scale_color_viridis()
dev.off()
Y1 = ggplot(data=fish_only, aes(x=FishLength, fill=Location))
jpeg(file = paste('ALL_ADULT_FISH_HIST_CHECK', Sys.Date(),'.jpg', sep = ''),quality=100, width=100,height=60,units='in', res=500)
Y1+geom_histogram(bins = 15) +
facet_wrap(~Legend_Fish, scales = "free")+
ggtitle("Fish Lengths All Locations") +
scale_x_continuous(labels = scales::number_format(accuracy = 1))+  scale_color_viridis()
Y1 = ggplot(data=fish_only, aes(x=FishLength, fill=Location))
jpeg(file = paste('ALL_ADULT_FISH_HIST_CHECK', Sys.Date(),'.jpg', sep = ''),quality=100, width=150,height=60,units='in', res=500)
Y1+geom_histogram(bins = 15) +
facet_wrap(~Legend_Fish, scales = "free")+
ggtitle("Fish Lengths All Locations") +
scale_x_continuous(labels = scales::number_format(accuracy = 1))+  scale_color_viridis()
dev.off()
ggplot(data=fish_in_verts_only, aes(x=FishLength)) +
geom_histogram(bins = 15, color = "black", fill = "gray") +
facet_wrap(~CommonName, scales = "free")+
ggtitle("Fish_in_verts_Lengths") +
theme_grey()
ggsave("All_Fish_in_invert_Hist.jpeg", width = 20, height = 15, plot = last_plot())
project= "DATA_PREP"
Y1 = ggplot(data=fish_in_verts_only, aes(x=FishLength, fill=Location))
jpeg(file = paste(project,"_",'Fish_in_verts_Lengths All Locations_', Sys.Date(),'.jpg', sep = ''),quality=100, width=10,height=6,units='in', res=300)
Y1+geom_histogram(bins = 15) +
facet_wrap(~Legend_Fish, scales = "free")+
ggtitle("Fish_in_verts_Lengths All Locations") +
scale_x_continuous(labels = scales::number_format(accuracy = 1))+  scale_color_viridis()
dev.off()
hist(fish5$FishLength)
boxplot(fish5$FishLength)
# Calculate quantiles for beach seine volumes
quant_fishLength = quantile(fish5$FishLength, na.rm=T) # Fish Lengths: 0%- 0, 25%- 30, 50%- 46, 75%- 64, 100%- 635
# Store the quantile values for beach seine crew
Q1_fishLength = quant_fishLength[2] # Put 25% value here
Q3_fishLength = quant_fishLength[4] # Put 75% value here
IQR_fishLength = Q3_fishLength - Q1_fishLength
min_fishLength = Q1_fishLength - 1.5*IQR_fishLength
max_fishLength = Q3_fishLength + 1.5*IQR_fishLength
# Set aside samples which are greater than the max or less than the min
check_fishLength = filter(fish5, fish5$FishLength < min_fishLength | fish5$FishLength > max_fishLength)
View(check_fishLength)
write.csv(check_fishLength, "FishLength_check.csv")
check_fishLength2 =check_fishLength[,c("SampleID_frp", "Location","CommonName", "fishLength")]
View(fishlengths)
check_fishLength2 =check_fishLength[,c("SampleID_frp", "Location","CommonName", "FishLength")]
View(check_fishLength2)
View(TotalCPUE4)
View(fish6)
fish7=fish6[,c("SampleID_frp","Location","GearTypeAbbreviation","Visit.Date","Season","DepthMeters", "Legend_Fish", "TotalCatch", "CPUEbySpp2","tCPUE","PercentComp")]
#For AFS talk stats
write.csv(fish7, file=here::here("Export.Files", paste('fish.comp.AFS',"_", Sys.Date(),'.csv', sep = '')))
fish7=fish6[,c("SampleID_frp","Location","GearTypeAbbreviation","Visit.Date","Season","DepthMeters", "Legend_Fish", "TotalCatch", "CPUEbySpp2","tCPUE","PercentComp","N")]
# Clear environment
rm(list = ls(all.names = TRUE)) #will clear all objects includes hidden objects.
library(readxl)
library(dplyr)
library(lubridate)
#Input files are Site Visits and Sample export from db- be sure to note the data date were exported from the db and export new files if any updates have been make to the db.
# Import files (export 05JUL2023)
sample1 <- read.csv(here::here("working","Sample_23APR20242024.csv"), quote = "")
dwr_sv <- read.csv(here::here("working","SiteVisit_23APR2024.csv"), header=T, quote = "") # All site visits from the export page
str(dwr_sv)
#Input files are Site Visits and Sample export from db- be sure to note the data date were exported from the db and export new files if any updates have been make to the db.
# Import files (export 05JUL2023)
sample1 <- read.csv(here::here("working","Sample_23APR20242024.csv"), quote = "")
#Input files are Site Visits and Sample export from db- be sure to note the data date were exported from the db and export new files if any updates have been make to the db.
# Import files (export 05JUL2023)
sample1 <- read.csv(here::here("working","Sample_23APR2024.csv"), quote = "")
dwr_sv <- read.csv(here::here("working","SiteVisit_23APR2024.csv"), header=T, quote = "") # All site visits from the export page
str(dwr_sv)
#Convert Visit.Date to date format
typeof(dwr_sv$Visit.Date)
dwr_sv$Visit.Date2 <- NA
dwr_sv$Visit.Date2 <- factor(dwr_sv$Visit.Date)
dwr_sv$Visit.Date2<-lubridate::mdy(dwr_sv$Visit.Date2)
dwr_sv$Visit.Date2<-as.Date(dwr_sv$Visit.Date2, format = "%Y-%m-%d")
#Use to double check that nothing weird happened when converting the dates
dwr_sv[,c("Visit.Date","Visit.Date2")]
#Create month and year variables
dwr_sv$year =lubridate::year(dwr_sv$Visit.Date2)
dwr_sv$month = lubridate::month(dwr_sv$Visit.Date2)
#Select year or date range desired
dwr_sv_AFS= subset(dwr_sv, Visit.Date2 > "2023-01-01" & Visit.Date2 < "2023-12-31")
dwr_sv=filter(dwr_sv, dwr_sv$year== 2023)
View(dwr_sv)
#######################################################################
#Test the merge of sample with dwr_sv to ensure nothing we want is dropped
nrow(sample1) ## 9572 rows
nrow(dwr_sv_AFS) ## 803 rows
test=merge(sample1, dwr_sv_AFS, by='VisitNo');test
nrow(test) ## 1266 rows; This information isn't helpful by itself yet; could be a good merge or there could be bad merges masking each other
unique(test$year) #2374
test2=merge(sample1, dwr_sv_AFS, by='VisitNo', all=T)
nrow(test2) ## 9573 rows;The takeaway from the fact that test 2 has more rows.
### 1)Because test2 is a different size than test, it suggests that there are some visitNo's found in either sample1 or dwr_sv_AFS that is not found in the other. Otherwise, test2 would be the same size as test
#This is expected since dwr_sv_AFS only has samples from a specified range in 2022 and 2023 and sample1 hasn't been filtered down to the desired dates.
unique(test2$year)
###How do we identify these issues once we know they exist?
##If we have identified that visitNo's are duplicated, can use the aggregate function to determine which are those visitNo's
summary.table.x=with(sample1, aggregate(list(number=VisitNo), list(VisitNo=VisitNo), length)) ##This function creates a summary table of how many times a SampleID appears in the data set (can go into further detail if needed)
summary.table.x[which(summary.table.x$number!=1),] ##Filters out which SampleID shows up more than once (remember that in actual dataframe, this can be a large table rather than just 4 rows)
###Repeat with the other data set
summary.table.y=with(dwr_sv_AFS, aggregate(list(number=VisitNo), list(VisitNo=VisitNo), length))
summary.table.y[which(summary.table.y$number!=1),] #Shows that SampleID shows up 3 times in the dataframe
###How do we identify which SampleIDs are found in 1 dataset and not the other?
`%!in%` = Negate(`%in%`) ##Run this line of code to create our own function which is %!in$; this function tells us what objects are not found in common between 2 vectors
(sample1$VisitNo) ##A vector of  SampleIDs found in dataframe x.3
(dwr_sv_AFS$VisitNo) ##A vector of  SampleIDs found in dataframe y.3
test1=sample1[which(sample1$VisitNo %!in% dwr_sv_AFS$VisitNo),] ##This function tells me that SampleID 4 is found in sample1 but not found in dwr_sv_AFS
test2=dwr_sv_AFS[which(dwr_sv_AFS$VisitNo %!in% sample1$VisitNo),] ###Switch order around to determine what SampleIDs are found in dwr_sv_AFS but not sample1
View(test2)
# Merge site and sample files (CHECK # rows in sitesample should be = or > # rows in sample1) **merge vs join
sitesample= merge(sample1, dwr_sv_AFS, by="VisitNo")
# Change locations as needed
sort(unique(sitesample$Location))
#rename file
ss2<- sitesample
#create Datetime column, potentially used for time of day analysis. R doesn't like regular time formats.
ss2$DateTime <-NA
ss2$DateTime <- paste(ss2$Visit.Date2, ss2$StartTime, sep = " ")
unique(ss2$DateTime)
typeof(ss2$DateTime)
library(lubridate)
typeof(ss2$StartTime)
unique(ss2$StartTime)
#Check what months we have
unique(ss2$month)
(ss2$Season<-ifelse((ss2$month<=2), "Winter",
ifelse((ss2$month>=3) & (ss2$month<=5), "Spring",
ifelse((ss2$month>=6) & (ss2$month<=8), "Summer",
ifelse((ss2$month>=9) & (ss2$month<=12), "Fall",
ifelse((ss2$month>13), "fix me", 0 ))))))
#Check that none say "fix me" or 0 or NA
unique(ss2$Season)
#Check gear types
sort(unique(ss2$GearTypeAbbreviation))
fish_in_inverts=filter(ss2, ss2$GearTypeAbbreviation== "MAC"|
ss2$GearTypeAbbreviation == "NT"|
ss2$GearTypeAbbreviation == "ZOOP"|
ss2$GearTypeAbbreviation == "EAV"|
ss2$GearTypeAbbreviation == "FAV"|
ss2$GearTypeAbbreviation == "SAV"|
ss2$GearTypeAbbreviation == "PPG"|
ss2$GearTypeAbbreviation == "PVC"|
ss2$GearTypeAbbreviation == "SR"
)
unique(fish_in_inverts$GearTypeAbbreviation)
unique(ss2$GearTypeAbbreviation)
ss2$GearTypeAbbreviation <- gsub("CAST0", "CAST", ss2$GearTypeAbbreviation)
ss2$GearTypeAbbreviation <- gsub("CASTB", "CAST", ss2$GearTypeAbbreviation)
#Filter just fish gear types used in 2022
#Change ss2 to a different variable name instead of overwriting ss2
ss_fish=filter(ss2, ss2$GearTypeAbbreviation== "BEASEI"|
ss2$GearTypeAbbreviation == "LAMOPE"|
ss2$GearTypeAbbreviation == "BIGLAM"|
ss2$GearTypeAbbreviation == "OTTTRA"|
ss2$GearTypeAbbreviation == "CAST"|
ss2$GearTypeAbbreviation == "HOOK" )
#check that only fish gear types are left
unique(ss_fish$GearTypeAbbreviation)
View(ss_fish)
write.csv(ss_fish, file = here::here("Export.Files", "sitesample_2023.csv"))
