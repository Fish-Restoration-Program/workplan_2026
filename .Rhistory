library(vegan)
library(purrr)
# Function to calculate samples needed to reach 80% and 90% of estimated richness
samples_to_target <- function(species_matrix, group_name) {
# 1. Estimate asymptotic richness
pool <- specpool(species_matrix)
est_richness <- pool$chao
# 2. Accumulation curve
acc <- specaccum(species_matrix, method = "random")
# 3. Targets
target_80 <- 0.8 * est_richness
target_90 <- 0.9 * est_richness
# 4. Find where richness first reaches or exceeds targets
n_80 <- min(which(acc$richness >= target_80), na.rm = TRUE)
n_90 <- min(which(acc$richness >= target_90), na.rm = TRUE)
# If never reaches target, return NA
if (is.infinite(n_80)) n_80 <- NA
if (is.infinite(n_90)) n_90 <- NA
return(tibble(
Group = group_name,
Estimated_Richness = est_richness,
Samples_80pct = n_80,
Samples_90pct = n_90,
Max_Samples = length(acc$sites),
Max_Observed_Richness = max(acc$richness)
))
}
# Run for all groups
results_tbl <- imap_dfr(species_list, samples_to_target)
# View results
print(results_tbl)
save(list=ls(),file= here::here("working/RData", "Workplan_Fish_code_04.RData"))
#Clear environment
rm(list = ls(all.names = TRUE)) #will clear all objects includes hidden objects.
load(here::here("working","RData", "Workplan_Fish_code_04.RData"))
library(vegan)
library(tidyverse)
# Function to calculate samples needed to reach 80% of estimated richness
samples_to_80pct <- function(site_data) {
# Remove empty rows (no species recorded)
site_data <- site_data[rowSums(site_data) > 0, ]
if (nrow(site_data) < 2) return(NA)  # Can't rarefy with fewer than 2 samples
# Estimate total richness (Chao1 or just the observed max)
spec_accum <- specaccum(site_data, method = "random", permutations = 100)
# Get estimated max richness (asymptote)
estimated_max <- max(spec_accum$richness)
# Calculate 80% threshold
target_richness <- 0.8 * estimated_max
# Find number of samples needed to reach at least 80%
sample_index <- which(spec_accum$richness >= target_richness)[1]
return(sample_index)
}
# Apply function to each element in the species_list
samples_needed <- map_dbl(species_list, samples_to_80pct)
# Combine with names
samples_to_80 <- tibble(
Site_Gear_Season = names(species_list),
Samples_to_80pct = samples_needed
)
print(samples_to_80)
write.csv(samples_to_80, file = here::here("Export.Files","sample_numbers_80.csv"))
save(list=ls(),file= here::here("working/RData", "Workplan_Fish_code_05.RData"))
#Clear environment
rm(list = ls(all.names = TRUE)) #will clear all objects includes hidden objects.
load(here::here("working","RData", "Workplan_Fish_code_05.RData"))
library(ggplot2)
library(tidyr)
library(dplyr)
# Split Site_Gear_Season into components
result_long <- samples_to_80 %>%
separate(Site_Gear_Season, into = c("Site", "GearType", "Season"), sep = "_")
# Plot heatmap with text labels
heatmap_plot<-ggplot(result_long, aes(x = GearType, y = Site, fill = Samples_to_80pct)) +
geom_tile(color = "white") +
geom_text(aes(label = round(Samples_to_80pct, 1)), color = "black", size = 4, na.rm = TRUE) +
facet_wrap(~Season) +
scale_fill_viridis_c(name = "Samples to 80%", na.value = "grey80") +
labs(
title = "Sampling Effort to Reach 80% of Estimated Species Richness",
x = "Gear Type",
y = "Site"
) +
theme_minimal(base_size = 14) +
theme(
plot.title = element_text(color = "black", size = 16, face = "bold"),
axis.title = element_text(color = "white", size = 14),
axis.text = element_text(color = "black", size = 12),
legend.title = element_text(color = "white", size = 13, face = "bold"),
legend.text = element_text(color = "white", size = 11),
axis.text.x = element_text(angle = 45, hjust = 1),
# Background customization
plot.background = element_rect(fill = "white", color = NA),        # whole figure
panel.background = element_rect(fill = "grey20", color = NA),      # panel only
strip.background = element_rect(fill = "grey35", color = NA),      # facet strip
legend.background = element_rect(fill = "grey20", color = NA),
legend.key = element_rect(fill = "grey20", color = NA),
panel.grid = element_blank()
)
# Save it
ggsave(paste("samples_to_80pct_heatmap",".png",sep = ""), path = here::here("working/Figures"), plot = heatmap_plot, width = 10, height = 10, dpi = 300)
save(list=ls(),file= here::here("working/RData", "Workplan_Fish_code_06.RData"))
#Clear environment
rm(list = ls(all.names = TRUE)) #will clear all objects includes hidden objects.
load(here::here("working","RData", "Workplan_Fish_code_06.RData"))
library(vegan)
library(tidyverse)
# Function to calculate samples needed to reach 80% of estimated richness
samples_to_90pct <- function(site_data) {
# Remove empty rows (no species recorded)
site_data <- site_data[rowSums(site_data) > 0, ]
if (nrow(site_data) < 2) return(NA)  # Can't rarefy with fewer than 2 samples
# Estimate total richness (Chao1 or just the observed max)
spec_accum <- specaccum(site_data, method = "random", permutations = 100)
# Get estimated max richness (asymptote)
estimated_max <- max(spec_accum$richness)
# Calculate 80% threshold
target_richness <- 0.9 * estimated_max
# Find number of samples needed to reach at least 80%
sample_index <- which(spec_accum$richness >= target_richness)[1]
return(sample_index)
}
# Apply function to each element in the species_list
samples_needed <- map_dbl(species_list, samples_to_90pct)
# Combine with names
samples_to_90 <- tibble(
Site_Gear_Season = names(species_list),
Samples_to_90pct = samples_needed
)
print(samples_to_90)
write.csv(samples_to_90, file = here::here("Export.Files","sample_numbers_90.csv"))
save(list=ls(),file= here::here("working/RData", "Workplan_Fish_code_07.RData"))
#Clear environment
rm(list = ls(all.names = TRUE)) #will clear all objects includes hidden objects.
load(here::here("working","RData", "Workplan_Fish_code_07.RData"))
library(ggplot2)
library(tidyr)
library(dplyr)
# Split Site_Gear_Season into components
result_long <- samples_to_90 %>%
separate(Site_Gear_Season, into = c("Site", "GearType", "Season"), sep = "_")
# Plot heatmap with text labels
heatmap_plot<-ggplot(result_long, aes(x = GearType, y = Site, fill = Samples_to_90pct)) +
geom_tile(color = "white") +
geom_text(aes(label = round(Samples_to_90pct, 1)), color = "black", size = 4, na.rm = TRUE) +
facet_wrap(~Season) +
scale_fill_viridis_c(name = "Samples to 90%", na.value = "grey80") +
labs(
title = "Sampling Effort to Reach 90% of Estimated Species Richness",
x = "Gear Type",
y = "Site"
) +
theme_minimal(base_size = 14) +
theme(
plot.title = element_text(color = "black", size = 16, face = "bold"),
axis.title = element_text(color = "white", size = 14),
axis.text = element_text(color = "black", size = 12),
legend.title = element_text(color = "white", size = 13, face = "bold"),
legend.text = element_text(color = "white", size = 11),
axis.text.x = element_text(angle = 45, hjust = 1),
# Background customization
plot.background = element_rect(fill = "white", color = NA),        # whole figure
panel.background = element_rect(fill = "grey20", color = NA),      # panel only
strip.background = element_rect(fill = "grey35", color = NA),      # facet strip
legend.background = element_rect(fill = "grey20", color = NA),
legend.key = element_rect(fill = "grey20", color = NA),
panel.grid = element_blank()
)
# Save it
ggsave(paste("samples_to_90pct_heatmap",".png",sep = ""), path = here::here("working/Figures"), plot = heatmap_plot, width = 10, height = 10, dpi = 300)
save(list=ls(),file= here::here("working/RData", "Workplan_Fish_code_08.RData"))
#| warning: false
#| include: false
#| echo: false
#| eval: FALSE
#Run fish_prep code first. It's output is fish.comp and TotalCPUE4.
# Clear environment
rm(list = ls(all.names = TRUE)) #will clear all objects includes hidden objects.
#########################################
#In this code, I'm trying to set the data up for rarefaction curves to determine the number of samples needed to capture species richness in a given location.
#Load data
fish.comp<-read.csv(here::here("working","fish_comp_all_counts_2025-05-13.csv")) # FROM AMAT_BDSC_TALKS code
#We don't need all of these columns, narrow it down to what's neccessary
colnames(fish.comp)
fish.comp2<-fish.comp[,c("SampleID_frp","Location","GearTypeAbbreviation","SeineDeploymentType", "Season", "year","month","fish5.CommonName","TotalCatch")]
#Fix Locations
#Change location names to match dfProject
fish.comp2$Location[fish.comp2$Location == "Stairsteps-\nLiberty Cut"]<-"Stairsteps-Liberty Cut"
fish.comp2$Location[fish.comp2$Location == "Arnold"]<-"Arnold Slough"
fish.comp2$Location[fish.comp2$Location == "Browns"]<-"Browns Island"
fish.comp2$Location[fish.comp2$Location == "Chipps"]<-"Chipps Island"
fish.comp2$Location[fish.comp2$Location == "Decker"]<-"Decker Island"
fish.comp2$Location[fish.comp2$Location == "Flyway Farms"]<-"Yolo Flyway Farms"
fish.comp2$Location[fish.comp2$Location == "Grizzly"]<-"Grizzly Bay"
fish.comp2$Location[fish.comp2$Location == "Horseshoe"]<-"Horseshoe Bend"
fish.comp2$Location[fish.comp2$Location == "Liberty"]<-"Liberty Island"
fish.comp2$Location[fish.comp2$Location == "Ryer"]<-"Ryer Island"
fish.comp2$Location[fish.comp2$Location == "Wing's\nLanding"]<-"Wings Landing"
fish.comp2$Location[fish.comp2$Location == "Wings"]<-"Wings Landing"
fish.comp2$Location[fish.comp2$Location == "Winter"]<-"Winter Island"
fish.comp2$Location[fish.comp2$Location == "WTIB"]<-"Webb Tract Islands and Berms"
fish.comp2$Location[fish.comp2$Location == "Webb Tract Island and Berms"]<-"Webb Tract Islands and Berms"
fish.comp2$Location[fish.comp2$Location == "Nurse-\nDenverton"]<-"Nurse-Denverton"
fish.comp2$Location[fish.comp2$Location == "Peytonia-\nSuisun"]<-"Peytonia-Suisun"
fish.comp2$Location[fish.comp2$Location == "Tule\nRed"]<-"Tule Red"
fish.comp2$Location[fish.comp2$Location == "Blacklock"]<-"Blacklock Marsh"
#Set up site type designations
dfproj <- data.frame(proj = c("Arnold Slough","Bradmoor Island","Chipps Island","Decker Island","Yolo Flyway Farms","Lookout Slough","Lower Yolo Ranch","Tule Red","Wings Landing","Winter Island"),
refSite = c("Blacklock Marsh","Blacklock Marsh","Browns Island","Webb Tract Islands and Berms","Liberty Island","Liberty Island","Liberty Island","Ryer Island","Rush Ranch","Browns Island"),
chSite = c("Nurse-Denverton","Nurse-Denverton","Honker-Spoonbill","Horseshoe Bend","Toe Drain","Shag Slough","Stairsteps-Liberty Cut","Grizzly Bay","Peytonia-Suisun","Broad Slough"),
sharedRegion = c("E Suisun Marsh","E Suisun Marsh","Confluence","Lower Sacramento-San Joaquin","Cache Slough Complex","Cache Slough Complex","Cache Slough Complex","Grizzly Bay","W Suisun Marsh","Confluence"))
#From Danny's code
fish.comp2$type <- ifelse(fish.comp2$Location %in% dfproj$proj, "Restoration", NA)
fish.comp2$type[which(fish.comp2$Location %in% dfproj$refSite)] <- "Reference"
fish.comp2$type[which(fish.comp2$Location %in% dfproj$chSite)] <- "Adj. \nWaterbody"
fish.comp2$type2 <- factor(fish.comp2$type, levels = c("Restoration","Reference","Adj. \nWaterbody"))
fish.comp2$sharedRegion <- NA
for(i in 1:nrow(fish.comp2)){
for(j in 1:nrow(dfproj)){
if(fish.comp2$Location[i] %in% c(dfproj[j,])){
fish.comp2$sharedRegion[i] = dfproj$sharedRegion[j]
}
}
}
list(unique(fish.comp2$type2))
fish.comp2<-dplyr::filter(fish.comp2, fish.comp2$GearTypeAbbreviation=="BEASEI"|
fish.comp2$GearTypeAbbreviation=="BIGLAM"|
fish.comp2$GearTypeAbbreviation=="LAMOPE"|
fish.comp2$GearTypeAbbreviation=="OTTTRA")
#checking what the numbers look like when we combine BIGLAM and LAMOPE
fish.comp2$GearTypeAbbreviation[fish.comp2$GearTypeAbbreviation == "BIGLAM"]<-"LAMPARA"
fish.comp2$GearTypeAbbreviation[fish.comp2$GearTypeAbbreviation == "LAMOPE"]<-"LAMPARA"
save(list=ls(),file= here::here("working/RData", "Workplan_Fish_code_01.RData"))
# Clear environment
rm(list = ls(all.names = TRUE)) #will clear all objects includes hidden objects.
load(here::here("working","RData", "Workplan_Fish_code_01.RData"))
library(tidyverse)
library(vegan)
library(iNEXT)
library(tidyr)
#Now we need to make this into wide format aka each row is a sample with all the species in columns
# Ensure SampleID and species columns are clean
fish.comp3 <- fish.comp2 %>%
mutate(SampleID = SampleID_frp,
Species = fish5.CommonName,
Catch = TotalCatch,
Group= Location) %>%
select(SampleID, Group, Species, Catch)
fish.comp4 <- fish.comp2 %>%
mutate(SampleID = SampleID_frp,
Species = fish5.CommonName,
Catch = TotalCatch,
Group= paste(Location, GearTypeAbbreviation, sep = "_")) %>%
select(SampleID, Group, Species, Catch)
fish.comp5 <- fish.comp2 %>%
mutate(SampleID = SampleID_frp,
Species = fish5.CommonName,
Catch = TotalCatch,
Group= paste(Location, GearTypeAbbreviation, Season, sep = "_")) %>%
select(SampleID, Group, Species, Catch)
fish.comp6 <- fish.comp2 %>%
mutate(SampleID = SampleID_frp,
Species = fish5.CommonName,
Catch = TotalCatch,
Group= paste(Location, Season, sep = "_")) %>%
select(SampleID, Group, Species, Catch)
#Checking that above worked properly
#If many groups only have 1 SampleID, it means the grouping or pivoting step is aggregating multiple samples.
fish.comp5 %>%
group_by(Group) %>%
summarise(n_samples = n_distinct(SampleID)) %>%
arrange(n_samples)
# Pivot to wide format: samples as rows, species as columns
fish.comp_wide<- fish.comp5 %>%
pivot_wider(
id_cols = c(SampleID, Group),         # keep each sample distinct
names_from = Species,
values_from = Catch,
values_fill = 0
)
fish.comp_wide %>% count(Group)  # how many samples per group?
species_list <- fish.comp_wide %>%
group_by(Group) %>%
group_split() %>%
setNames(fish.comp_wide %>% group_by(Group) %>% group_keys() %>% pull(Group))
# Keep only groups with 2+ samples
species_list <- species_list[sapply(species_list, nrow) >= 2]
# Remove metadata columns
species_list <- lapply(species_list, function(df) {
df %>% select(-SampleID, -Group)
})
save(list=ls(),file= here::here("working/RData", "Workplan_Fish_code_02.RData"))
#Clear environment
rm(list = ls(all.names = TRUE)) #will clear all objects includes hidden objects.
load(here::here("working","RData", "Workplan_Fish_code_02.RData"))
library(vegan)
# Optional: Set color palette
library(RColorBrewer)
cols <- brewer.pal(min(length(species_list), 8), "Set2")
# Prepare plot space
plot(NULL,
xlim = c(1, max(sapply(species_list, nrow))),
ylim = c(0, max(sapply(species_list, function(mat) max(specaccum(mat)$richness)))),
xlab = "Samples",
ylab = "Species Richness",
main = "Species Accumulation by Location × Gear x Season")
# Plot each group's accumulation curve
for (i in seq_along(species_list)) {
acc <- specaccum(species_list[[i]], method = "random")
lines(acc$sites, acc$richness, col = cols[i %% length(cols) + 1], lwd = 2)
}
legend("right", legend = names(species_list), col = cols, lwd = 2, cex = 0.7)
# 1. Calculate specaccum results for each group
accum_data <- lapply(names(species_list), function(name) {
acc <- specaccum(species_list[[name]], method = "random")
data.frame(
Samples = acc$sites,
Richness = acc$richness,
Group = name
)
})
# 2. Combine all into one data frame
accum_df <- bind_rows(accum_data)
# 3. Plot with ggplot2
ploX<-ggplot(accum_df, aes(x = Samples, y = Richness, color = Group)) +
geom_line(size = 1.2) +
labs(
title = "Species Accumulation by Location x Gear x Season",
x = "Samples",
y = "Species Richness",
color = NULL  # removes default legend title
) +
theme_minimal() +
theme(
legend.position = "right",
plot.title = element_text(hjust = 0.5)
)
ggsave(paste("RARE_CURVE2_LAM_COMBINED",".png",sep = ""),path = here::here("working/Figures"), ploX, width = 1000, height = 500, dpi = 150, units = "px")
save(list=ls(),file= here::here("working/RData", "Workplan_Fish_code_03.RData"))
#Clear environment
rm(list = ls(all.names = TRUE)) #will clear all objects includes hidden objects.
load(here::here("working","RData", "Workplan_Fish_code_03.RData"))
library(dplyr)
library(vegan)
library(purrr)
# Function to calculate samples needed to reach 80% and 90% of estimated richness
samples_to_target <- function(species_matrix, group_name) {
# 1. Estimate asymptotic richness
pool <- specpool(species_matrix)
est_richness <- pool$chao
# 2. Accumulation curve
acc <- specaccum(species_matrix, method = "random")
# 3. Targets
target_80 <- 0.8 * est_richness
target_90 <- 0.9 * est_richness
# 4. Find where richness first reaches or exceeds targets
n_80 <- min(which(acc$richness >= target_80), na.rm = TRUE)
n_90 <- min(which(acc$richness >= target_90), na.rm = TRUE)
# If never reaches target, return NA
if (is.infinite(n_80)) n_80 <- NA
if (is.infinite(n_90)) n_90 <- NA
return(tibble(
Group = group_name,
Estimated_Richness = est_richness,
Samples_80pct = n_80,
Samples_90pct = n_90,
Max_Samples = length(acc$sites),
Max_Observed_Richness = max(acc$richness)
))
}
# Run for all groups
results_tbl <- imap_dfr(species_list, samples_to_target)
# View results
print(results_tbl)
save(list=ls(),file= here::here("working/RData", "Workplan_Fish_code_04.RData"))
#Clear environment
rm(list = ls(all.names = TRUE)) #will clear all objects includes hidden objects.
load(here::here("working","RData", "Workplan_Fish_code_04.RData"))
library(vegan)
library(tidyverse)
# Function to calculate samples needed to reach 80% of estimated richness
samples_to_80pct <- function(site_data) {
# Remove empty rows (no species recorded)
site_data <- site_data[rowSums(site_data) > 0, ]
if (nrow(site_data) < 2) return(NA)  # Can't rarefy with fewer than 2 samples
# Estimate total richness (Chao1 or just the observed max)
spec_accum <- specaccum(site_data, method = "random", permutations = 100)
# Get estimated max richness (asymptote)
estimated_max <- max(spec_accum$richness)
# Calculate 80% threshold
target_richness <- 0.8 * estimated_max
# Find number of samples needed to reach at least 80%
sample_index <- which(spec_accum$richness >= target_richness)[1]
return(sample_index)
}
# Apply function to each element in the species_list
samples_needed <- map_dbl(species_list, samples_to_80pct)
# Combine with names
samples_to_80 <- tibble(
Site_Gear_Season = names(species_list),
Samples_to_80pct = samples_needed
)
print(samples_to_80)
write.csv(samples_to_80, file = here::here("Export.Files","sample_numbers_80_LAM_COMBINED.csv"))
save(list=ls(),file= here::here("working/RData", "Workplan_Fish_code_05.RData"))
#Clear environment
rm(list = ls(all.names = TRUE)) #will clear all objects includes hidden objects.
load(here::here("working","RData", "Workplan_Fish_code_05.RData"))
library(ggplot2)
library(tidyr)
library(dplyr)
# Split Site_Gear_Season into components
result_long <- samples_to_80 %>%
separate(Site_Gear_Season, into = c("Site", "GearType", "Season"), sep = "_")
# Plot heatmap with text labels
heatmap_plot<-ggplot(result_long, aes(x = GearType, y = Site, fill = Samples_to_80pct)) +
geom_tile(color = "white") +
geom_text(aes(label = round(Samples_to_80pct, 1)), color = "black", size = 4, na.rm = TRUE) +
facet_wrap(~Season) +
scale_fill_viridis_c(name = "Samples to 80%", na.value = "grey80") +
labs(
title = "Sampling Effort to Reach 80% of Estimated Species Richness",
x = "Gear Type",
y = "Site"
) +
theme_minimal(base_size = 14) +
theme(
plot.title = element_text(color = "black", size = 16, face = "bold"),
axis.title = element_text(color = "white", size = 14),
axis.text = element_text(color = "black", size = 12),
legend.title = element_text(color = "white", size = 13, face = "bold"),
legend.text = element_text(color = "white", size = 11),
axis.text.x = element_text(angle = 45, hjust = 1),
# Background customization
plot.background = element_rect(fill = "white", color = NA),        # whole figure
panel.background = element_rect(fill = "grey20", color = NA),      # panel only
strip.background = element_rect(fill = "grey35", color = NA),      # facet strip
legend.background = element_rect(fill = "grey20", color = NA),
legend.key = element_rect(fill = "grey20", color = NA),
panel.grid = element_blank()
)
# Save it
ggsave(paste("samples_to_80pct_heatmap_LAM_COMBINED",".png",sep = ""), path = here::here("working/Figures"), plot = heatmap_plot, width = 10, height = 10, dpi = 300)
save(list=ls(),file= here::here("working/RData", "Workplan_Fish_code_06.RData"))
#Clear environment
rm(list = ls(all.names = TRUE)) #will clear all objects includes hidden objects.
load(here::here("working","RData", "Workplan_Fish_code_06.RData"))
library(vegan)
library(tidyverse)
# Function to calculate samples needed to reach 80% of estimated richness
samples_to_90pct <- function(site_data) {
# Remove empty rows (no species recorded)
site_data <- site_data[rowSums(site_data) > 0, ]
if (nrow(site_data) < 2) return(NA)  # Can't rarefy with fewer than 2 samples
# Estimate total richness (Chao1 or just the observed max)
spec_accum <- specaccum(site_data, method = "random", permutations = 100)
# Get estimated max richness (asymptote)
estimated_max <- max(spec_accum$richness)
# Calculate 80% threshold
target_richness <- 0.9 * estimated_max
# Find number of samples needed to reach at least 80%
sample_index <- which(spec_accum$richness >= target_richness)[1]
return(sample_index)
}
# Apply function to each element in the species_list
samples_needed <- map_dbl(species_list, samples_to_90pct)
# Combine with names
samples_to_90 <- tibble(
Site_Gear_Season = names(species_list),
Samples_to_90pct = samples_needed
)
print(samples_to_90)
write.csv(samples_to_90, file = here::here("Export.Files","sample_numbers_90_LAM_COMBINED.csv"))
save(list=ls(),file= here::here("working/RData", "Workplan_Fish_code_07.RData"))
#Clear environment
rm(list = ls(all.names = TRUE)) #will clear all objects includes hidden objects.
load(here::here("working","RData", "Workplan_Fish_code_07.RData"))
library(ggplot2)
library(tidyr)
library(dplyr)
# Split Site_Gear_Season into components
result_long <- samples_to_90 %>%
separate(Site_Gear_Season, into = c("Site", "GearType", "Season"), sep = "_")
# Plot heatmap with text labels
heatmap_plot<-ggplot(result_long, aes(x = GearType, y = Site, fill = Samples_to_90pct)) +
geom_tile(color = "white") +
geom_text(aes(label = round(Samples_to_90pct, 1)), color = "black", size = 4, na.rm = TRUE) +
facet_wrap(~Season) +
scale_fill_viridis_c(name = "Samples to 90%", na.value = "grey80") +
labs(
title = "Sampling Effort to Reach 90% of Estimated Species Richness",
x = "Gear Type",
y = "Site"
) +
theme_minimal(base_size = 14) +
theme(
plot.title = element_text(color = "black", size = 16, face = "bold"),
axis.title = element_text(color = "white", size = 14),
axis.text = element_text(color = "black", size = 12),
legend.title = element_text(color = "white", size = 13, face = "bold"),
legend.text = element_text(color = "white", size = 11),
axis.text.x = element_text(angle = 45, hjust = 1),
# Background customization
plot.background = element_rect(fill = "white", color = NA),        # whole figure
panel.background = element_rect(fill = "grey20", color = NA),      # panel only
strip.background = element_rect(fill = "grey35", color = NA),      # facet strip
legend.background = element_rect(fill = "grey20", color = NA),
legend.key = element_rect(fill = "grey20", color = NA),
panel.grid = element_blank()
)
# Save it
ggsave(paste("samples_to_90pct_heatmap_LAM_COMBINED",".png",sep = ""), path = here::here("working/Figures"), plot = heatmap_plot, width = 10, height = 10, dpi = 300)
save(list=ls(),file= here::here("working/RData", "Workplan_Fish_code_08.RData"))
