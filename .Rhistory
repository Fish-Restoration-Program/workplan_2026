# 4. Find where richness first reaches or exceeds targets
n_80 <- min(which(acc$richness >= target_80), na.rm = TRUE)
n_90 <- min(which(acc$richness >= target_90), na.rm = TRUE)
# If never reaches target, return NA
if (is.infinite(n_80)) n_80 <- NA
if (is.infinite(n_90)) n_90 <- NA
return(tibble(
Group = group_name,
Estimated_Richness = est_richness,
Samples_80pct = n_80,
Samples_90pct = n_90,
Max_Samples = length(acc$sites),
Max_Observed_Richness = max(acc$richness)
))
}
# Run for all groups
results_tbl <- imap_dfr(species_list, samples_to_target)
# View results
print(results_tbl)
View(results_tbl)
# Replace 'your_group_name' and 'species_list$your_group_name' with your actual group
species_matrix <- species_list[["Liberty Island_BEASEI_Fall"]]  # Put a real group name here like "Liberty Island_BEASEI_Fall"
# Define the models yourself
model_functions <- list(
arrhenius = function(x, coef) coef[1] * x^coef[2],
michaelis = function(x, coef) (coef[1] * x) / (coef[2] + x),
lomolino = function(x, coef) coef[1] / (1 + coef[2]^log(x / coef[3]))
)
group_name <- "Liberty Island_BIGLAM_Fall"  # Replace with a real group
species_matrix <- species_list[[group_name]]
species_matrix <- species_matrix[rowSums(species_matrix) > 0, ]
acc <- specaccum(species_matrix, method = "random")
fit <- NULL
model_used <- NULL
models <- c("arrhenius", "michaelis", "lomolino")
for (model_name in models) {
fit_try <- tryCatch({
fitspecaccum(acc, model = model_name)
}, error = function(e) NULL)
if (!is.null(fit_try)) {
fit <- fit_try
model_used <- model_name
break
}
}
if (!is.null(fit)) {
plot(acc, main = paste("Model:", model_used))
lines(fit, col = "blue")
extrap_fun <- model_functions[[model_used]]
params <- fit$coef
x_vals <- seq(length(acc$sites), 500, by = 1)
y_vals <- extrap_fun(x_vals, params)
target <- 0.8 * max(y_vals)
samples_to_target <- x_vals[which(y_vals >= target)[1]]
cat("80% richness (", round(target, 1), ") reached at", samples_to_target, "samples\n")
} else {
cat("Model fitting failed for group:", group_name, "\n")
}
library(vegan)
library(dplyr)
library(purrr)
library(tibble)
# Main function for each group
samples_needed_to_reach_percent <- function(species_matrix, group_name, percent = 0.8, max_extrap = 500) {
# 1. Estimate asymptotic richness with specpool
pool <- specpool(species_matrix)
est_richness <- pool$chao
# 2. Accumulation curve (randomized)
acc <- tryCatch(specaccum(species_matrix, method = "random"), error = function(e) return(NULL))
if (is.null(acc)) {
return(tibble(Group = group_name, Estimated_Richness = NA, Target_Richness = NA,
Samples_Observed = NA, Samples_To_Reach = NA, Extrapolated = NA))
}
# 3. Target richness
target <- percent * est_richness
# 4. Fit model to the accumulation curve
fit <- tryCatch(fitspecaccum(acc, model = "lomolino"), error = function(e) return(NULL))
if (is.null(fit)) {
return(tibble(Group = group_name, Estimated_Richness = est_richness, Target_Richness = target,
Samples_Observed = length(acc$sites), Samples_To_Reach = NA, Extrapolated = NA))
}
# 5. Estimate richness predictions
predicted_richness <- fit$predict
# 6. If curve already hits target richness, find sample where that happens
# Try to extrapolate using the model if needed
if (any(predicted_richness >= target)) {
n_samples <- which(predicted_richness >= target)[1]
extrapolated <- FALSE
} else {
# Extrapolate beyond current sample size using model
model_fun <- fit$fun
params <- fit$coef
# Predict values from current max to extrapolation limit
x_vals <- seq(length(acc$sites), max_extrap, by = 1)
y_vals <- model_fun(x_vals, params)
# If even extrapolated values never hit target, return NA
if (all(y_vals < target)) {
n_samples <- NA
extrapolated <- TRUE
} else {
# Find smallest x where predicted richness â‰¥ target
n_samples <- x_vals[which(y_vals >= target)[1]]
extrapolated <- TRUE
}
}
# 8. Return as a row
tibble(
Group = group_name,
Estimated_Richness = round(est_richness, 2),
Target_Richness = round(target, 2),
Samples_Observed = length(acc$sites),
Samples_To_Reach = n_samples,
Extrapolated = extrapolated
)
}
# ðŸ§  Apply to all groups in your species_list (named list of sample-by-species matrices)
# Replace `species_list` with your actual list if needed
sample_target_table <- imap_dfr(species_list, ~samples_needed_to_reach_percent(.x, .y, percent = 0.8))
# View the result
print(sample_target_table)
# Optional: Save to CSV
write.csv(sample_target_table, "samples_needed_to_reach_80_percent_richness.csv", row.names = FALSE)
library(vegan)
library(dplyr)
# Define model functions manually
model_functions <- list(
arrhenius = function(x, coef) coef[1] * x^coef[2],
michaelis = function(x, coef) (coef[1] * x) / (coef[2] + x),
lomolino = function(x, coef) coef[1] / (1 + coef[2]^log(x / coef[3]))
)
# Main function
calculate_sample_targets <- function(species_list, richness_target = 0.8, max_samples = 500) {
results <- data.frame()
models <- c("arrhenius", "michaelis", "lomolino")
for (group_name in names(species_list)) {
species_matrix <- species_list[[group_name]]
species_matrix <- species_matrix[rowSums(species_matrix) > 0, ]
# Skip if not enough data
if (nrow(species_matrix) < 3 || ncol(species_matrix) < 1) {
next
}
acc <- specaccum(species_matrix, method = "random")
fit <- NULL
model_used <- NA
for (model_name in models) {
fit_try <- tryCatch({
fitspecaccum(acc, model = model_name)
}, error = function(e) NULL)
if (!is.null(fit_try)) {
fit <- fit_try
model_used <- model_name
break
}
}
# Only calculate if fit was successful and model function exists
if (!is.null(fit) && model_used %in% names(model_functions)) {
extrap_fun <- model_functions[[model_used]]
params <- fit$coef
x_vals <- seq(length(acc$sites), max_samples, by = 1)
y_vals <- tryCatch({
extrap_fun(x_vals, params)
}, error = function(e) rep(NA, length(x_vals)))
if (all(is.na(y_vals))) {
samples_to_target <- NA
max_richness <- NA
} else {
target_richness <- richness_target * max(y_vals, na.rm = TRUE)
samples_to_target <- x_vals[which(y_vals >= target_richness)[1]]
max_richness <- max(y_vals, na.rm = TRUE)
}
results <- rbind(results, data.frame(
Group = group_name,
Model = model_used,
Extrapolated_Richness = round(max_richness, 2),
Target_Percent = richness_target * 100,
Samples_To_Target = samples_to_target
))
} else {
results <- rbind(results, data.frame(
Group = group_name,
Model = NA,
Extrapolated_Richness = NA,
Target_Percent = richness_target * 100,
Samples_To_Target = NA
))
}
}
return(results)
}
results_table <- calculate_sample_targets(species_list)
head(results_table)
View(results_table)
View(species_matrix)
View(species_list)
library(vegan)
library(tidyverse)
# Function to calculate samples needed to reach 80% of estimated richness
samples_to_80pct <- function(site_data) {
# Remove empty rows (no species recorded)
site_data <- site_data[rowSums(site_data) > 0, ]
if (nrow(site_data) < 2) return(NA)  # Can't rarefy with fewer than 2 samples
# Estimate total richness (Chao1 or just the observed max)
spec_accum <- specaccum(site_data, method = "random", permutations = 100)
# Get estimated max richness (asymptote)
estimated_max <- max(spec_accum$richness)
# Calculate 80% threshold
target_richness <- 0.8 * estimated_max
# Find number of samples needed to reach at least 80%
sample_index <- which(spec_accum$richness >= target_richness)[1]
return(sample_index)
}
# Apply function to each element in the species_list
samples_needed <- map_dbl(species_list, samples_to_80pct)
# Combine with names
result <- tibble(
Site_Gear_Season = names(species_list),
Samples_to_80pct = samples_needed
)
print(result)
View(result)
write.csv(result, file = here::here("Export.Files","sample_numbers_80.csv"))
# Combine with names
samples_to_80 <- tibble(
Site_Gear_Season = names(species_list),
Samples_to_80pct = samples_needed
)
print(samples_to_80)
write.csv(samples_to_80, file = here::here("Export.Files","sample_numbers_80.csv"))
library(ggplot2)
library(tidyr)
library(dplyr)
# Split Site_Gear_Season into components
result_long <- result %>%
separate(Site_Gear_Season, into = c("Site", "GearType", "Season"), sep = "_")
# Plot heatmap
ggplot(result_long, aes(x = GearType, y = Site, fill = Samples_to_80pct)) +
geom_tile(color = "white") +
facet_wrap(~Season) +
scale_fill_viridis_c(name = "Samples to 80%", na.value = "grey80") +
labs(
title = "Sampling Effort to Reach 80% of Estimated Species Richness",
x = "Gear Type",
y = "Site"
) +
theme_minimal(base_size = 14) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
panel.grid = element_blank()
)
# Plot heatmap with text labels
ggplot(result_long, aes(x = GearType, y = Site, fill = Samples_to_80pct)) +
geom_tile(color = "white") +
geom_text(aes(label = round(Samples_to_80pct, 1)), color = "black", size = 4, na.rm = TRUE) +
facet_wrap(~Season) +
scale_fill_viridis_c(name = "Samples to 80%", na.value = "grey80") +
labs(
title = "Sampling Effort to Reach 80% of Estimated Species Richness",
x = "Gear Type",
y = "Site"
) +
theme_minimal(base_size = 14) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
panel.grid = element_blank()
)
# Save it
ggsave("samples_to_80pct_heatmap.png", plot = heatmap_plot, width = 10, height = 8, dpi = 300)
# Plot heatmap with text labels
heatmap_plot<-ggplot(result_long, aes(x = GearType, y = Site, fill = Samples_to_80pct)) +
geom_tile(color = "white") +
geom_text(aes(label = round(Samples_to_80pct, 1)), color = "black", size = 4, na.rm = TRUE) +
facet_wrap(~Season) +
scale_fill_viridis_c(name = "Samples to 80%", na.value = "grey80") +
labs(
title = "Sampling Effort to Reach 80% of Estimated Species Richness",
x = "Gear Type",
y = "Site"
) +
theme_minimal(base_size = 14) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
panel.grid = element_blank()
)
# Save it
ggsave("samples_to_80pct_heatmap.png", plot = heatmap_plot, width = 10, height = 8, dpi = 300)
# Save it
ggsave("samples_to_80pct_heatmap.png", plot = heatmap_plot, width = 10, height = 10, dpi = 300)
# Plot heatmap with text labels
heatmap_plot<-ggplot(result_long, aes(x = GearType, y = Site, fill = Samples_to_80pct)) +
geom_tile(color = "white") +
geom_text(aes(label = round(Samples_to_80pct, 1)), color = "black", size = 4, na.rm = TRUE) +
facet_wrap(~Season) +
scale_fill_viridis_c(name = "Samples to 80%", na.value = "grey80") +
labs(
title = "Sampling Effort to Reach 80% of Estimated Species Richness",
x = "Gear Type",
y = "Site"
) +
theme_minimal(base_size = 14) +
theme(
plot.title = element_text(color = "white", size = 16, face = "bold"),
axis.title = element_text(color = "white", size = 14),
axis.text = element_text(color = "white", size = 12),
legend.title = element_text(color = "white", size = 13, face = "bold"),
legend.text = element_text(color = "white", size = 11),
axis.text.x = element_text(angle = 45, hjust = 1),
panel.grid = element_blank()
)
# Save it
ggsave("samples_to_80pct_heatmap.png", plot = heatmap_plot, width = 10, height = 10, dpi = 300)
# Save it
ggsave("samples_to_80pct_heatmap.png", plot = heatmap_plot, width = 10, height = 10, dpi = 300)
# Plot heatmap with text labels
heatmap_plot<-ggplot(result_long, aes(x = GearType, y = Site, fill = Samples_to_80pct)) +
geom_tile(color = "white") +
geom_text(aes(label = round(Samples_to_80pct, 1)), color = "black", size = 4, na.rm = TRUE) +
facet_wrap(~Season) +
scale_fill_viridis_c(name = "Samples to 80%", na.value = "grey80") +
labs(
title = "Sampling Effort to Reach 80% of Estimated Species Richness",
x = "Gear Type",
y = "Site"
) +
theme_minimal(base_size = 14) +
theme(
plot.title = element_text(color = "black", size = 16, face = "bold"),
axis.title = element_text(color = "black", size = 14),
axis.text = element_text(color = "black", size = 12),
legend.title = element_text(color = "black", size = 13, face = "bold"),
legend.text = element_text(color = "black", size = 11),
axis.text.x = element_text(angle = 45, hjust = 1),
panel.grid = element_blank()
# Background customization
plot.background = element_rect(fill = "white", color = NA),        # whole figure
panel.background = element_rect(fill = "grey20", color = NA),      # panel only
strip.background = element_rect(fill = "grey35", color = NA),      # facet strip
legend.background = element_rect(fill = "grey20", color = NA),
legend.key = element_rect(fill = "grey20", color = NA),
)
# Plot heatmap with text labels
heatmap_plot<-ggplot(result_long, aes(x = GearType, y = Site, fill = Samples_to_80pct)) +
geom_tile(color = "white") +
geom_text(aes(label = round(Samples_to_80pct, 1)), color = "black", size = 4, na.rm = TRUE) +
facet_wrap(~Season) +
scale_fill_viridis_c(name = "Samples to 80%", na.value = "grey80") +
labs(
title = "Sampling Effort to Reach 80% of Estimated Species Richness",
x = "Gear Type",
y = "Site"
) +
theme_minimal(base_size = 14) +
theme(
plot.title = element_text(color = "black", size = 16, face = "bold"),
axis.title = element_text(color = "black", size = 14),
axis.text = element_text(color = "black", size = 12),
legend.title = element_text(color = "black", size = 13, face = "bold"),
legend.text = element_text(color = "black", size = 11),
axis.text.x = element_text(angle = 45, hjust = 1),
panel.grid = element_blank()
# Background customization
plot.background = element_rect(fill = "white", color = NA),        # whole figure
panel.background = element_rect(fill = "grey20", color = NA),      # panel only
strip.background = element_rect(fill = "grey35", color = NA),      # facet strip
legend.background = element_rect(fill = "grey20", color = NA),
legend.key = element_rect(fill = "grey20", color = NA)
)
# Plot heatmap with text labels
heatmap_plot<-ggplot(result_long, aes(x = GearType, y = Site, fill = Samples_to_80pct)) +
geom_tile(color = "white") +
geom_text(aes(label = round(Samples_to_80pct, 1)), color = "black", size = 4, na.rm = TRUE) +
facet_wrap(~Season) +
scale_fill_viridis_c(name = "Samples to 80%", na.value = "grey80") +
labs(
title = "Sampling Effort to Reach 80% of Estimated Species Richness",
x = "Gear Type",
y = "Site"
) +
theme_minimal(base_size = 14) +
theme(
plot.title = element_text(color = "black", size = 16, face = "bold"),
axis.title = element_text(color = "black", size = 14),
axis.text = element_text(color = "black", size = 12),
legend.title = element_text(color = "black", size = 13, face = "bold"),
legend.text = element_text(color = "black", size = 11),
axis.text.x = element_text(angle = 45, hjust = 1),
panel.grid = element_blank(),
# Background customization
plot.background = element_rect(fill = "white", color = NA),        # whole figure
panel.background = element_rect(fill = "grey20", color = NA),      # panel only
strip.background = element_rect(fill = "grey35", color = NA),      # facet strip
legend.background = element_rect(fill = "grey20", color = NA),
legend.key = element_rect(fill = "grey20", color = NA),
panel.grid = element_blank()
)
# Plot heatmap with text labels
heatmap_plot<-ggplot(result_long, aes(x = GearType, y = Site, fill = Samples_to_80pct)) +
geom_tile(color = "white") +
geom_text(aes(label = round(Samples_to_80pct, 1)), color = "black", size = 4, na.rm = TRUE) +
facet_wrap(~Season) +
scale_fill_viridis_c(name = "Samples to 80%", na.value = "grey80") +
labs(
title = "Sampling Effort to Reach 80% of Estimated Species Richness",
x = "Gear Type",
y = "Site"
) +
theme_minimal(base_size = 14) +
theme(
plot.title = element_text(color = "black", size = 16, face = "bold"),
axis.title = element_text(color = "black", size = 14),
axis.text = element_text(color = "black", size = 12),
legend.title = element_text(color = "black", size = 13, face = "bold"),
legend.text = element_text(color = "black", size = 11),
axis.text.x = element_text(angle = 45, hjust = 1),
# Background customization
plot.background = element_rect(fill = "white", color = NA),        # whole figure
panel.background = element_rect(fill = "grey20", color = NA),      # panel only
strip.background = element_rect(fill = "grey35", color = NA),      # facet strip
legend.background = element_rect(fill = "grey20", color = NA),
legend.key = element_rect(fill = "grey20", color = NA),
panel.grid = element_blank()
)
# Save it
ggsave("samples_to_80pct_heatmap.png", plot = heatmap_plot, width = 10, height = 10, dpi = 300)
# Save it
ggsave("samples_to_80pct_heatmap.png", plot = heatmap_plot, width = 10, height = 10, dpi = 300)
# Plot heatmap with text labels
heatmap_plot<-ggplot(result_long, aes(x = GearType, y = Site, fill = Samples_to_80pct)) +
geom_tile(color = "white") +
geom_text(aes(label = round(Samples_to_80pct, 1)), color = "black", size = 4, na.rm = TRUE) +
facet_wrap(~Season) +
scale_fill_viridis_c(name = "Samples to 80%", na.value = "grey80") +
labs(
title = "Sampling Effort to Reach 80% of Estimated Species Richness",
x = "Gear Type",
y = "Site"
) +
theme_minimal(base_size = 14) +
theme(
plot.title = element_text(color = "black", size = 16, face = "bold"),
axis.title = element_text(color = "white", size = 14),
axis.text = element_text(color = "black", size = 12),
legend.title = element_text(color = "white", size = 13, face = "bold"),
legend.text = element_text(color = "white", size = 11),
axis.text.x = element_text(angle = 45, hjust = 1),
# Background customization
plot.background = element_rect(fill = "white", color = NA),        # whole figure
panel.background = element_rect(fill = "grey20", color = NA),      # panel only
strip.background = element_rect(fill = "grey35", color = NA),      # facet strip
legend.background = element_rect(fill = "grey20", color = NA),
legend.key = element_rect(fill = "grey20", color = NA),
panel.grid = element_blank()
)
# Save it
ggsave("samples_to_80pct_heatmap.png", plot = heatmap_plot, width = 10, height = 10, dpi = 300)
# Plot heatmap with text labels
heatmap_plot<-ggplot(result_long, aes(x = GearType, y = Site, fill = Samples_to_80pct)) +
geom_tile(color = "white") +
geom_text(aes(label = round(Samples_to_80pct, 1)), color = "black", size = 4, na.rm = TRUE) +
facet_wrap(~Season) +
scale_fill_viridis_c(name = "Samples to 80%", na.value = "grey80") +
labs(
title = "Sampling Effort to Reach 80% of Estimated Species Richness",
x = "Gear Type",
y = "Site"
) +
theme_minimal(base_size = 14) +
theme(
plot.title = element_text(color = "black", size = 16, face = "bold"),
axis.title = element_text(color = "white", size = 14),
axis.text = element_text(color = "white", size = 12),
legend.title = element_text(color = "white", size = 13, face = "bold"),
legend.text = element_text(color = "white", size = 11),
axis.text.x = element_text(angle = 45, hjust = 1),
# Background customization
plot.background = element_rect(fill = "white", color = NA),        # whole figure
panel.background = element_rect(fill = "grey20", color = NA),      # panel only
strip.background = element_rect(fill = "grey35", color = NA),      # facet strip
legend.background = element_rect(fill = "grey20", color = NA),
legend.key = element_rect(fill = "grey20", color = NA),
panel.grid = element_blank()
)
# Save it
ggsave("samples_to_80pct_heatmap.png", plot = heatmap_plot, width = 10, height = 10, dpi = 300)
# Plot heatmap with text labels
heatmap_plot<-ggplot(result_long, aes(x = GearType, y = Site, fill = Samples_to_80pct)) +
geom_tile(color = "white") +
geom_text(aes(label = round(Samples_to_80pct, 1)), color = "black", size = 4, na.rm = TRUE) +
facet_wrap(~Season) +
scale_fill_viridis_c(name = "Samples to 80%", na.value = "grey80") +
labs(
title = "Sampling Effort to Reach 80% of Estimated Species Richness",
x = "Gear Type",
y = "Site"
) +
theme_minimal(base_size = 14) +
theme(
plot.title = element_text(color = "black", size = 16, face = "bold"),
axis.title = element_text(color = "white", size = 14),
axis.text = element_text(color = "black", size = 12),
legend.title = element_text(color = "white", size = 13, face = "bold"),
legend.text = element_text(color = "white", size = 11),
axis.text.x = element_text(angle = 45, hjust = 1),
# Background customization
plot.background = element_rect(fill = "white", color = NA),        # whole figure
panel.background = element_rect(fill = "grey20", color = NA),      # panel only
strip.background = element_rect(fill = "grey35", color = NA),      # facet strip
legend.background = element_rect(fill = "grey20", color = NA),
legend.key = element_rect(fill = "grey20", color = NA),
panel.grid = element_blank()
)
# Save it
ggsave("samples_to_80pct_heatmap.png", plot = heatmap_plot, width = 10, height = 10, dpi = 300)
