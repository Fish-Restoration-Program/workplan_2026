---
title: "workplan_2026_analyses"
author: "Emma Davidson"
date: '2025-05-13'
output: html_document
---

```{r}
#| warning: false
#| include: false
#| echo: false
#| eval: FALSE

#Run fish_prep code first. It's output is fish.comp and TotalCPUE4.

# Clear environment
rm(list = ls(all.names = TRUE)) #will clear all objects includes hidden objects.


#########################################
#In this code, I'm trying to set the data up for rarefaction curves to determine the number of samples needed to capture species richness in a given location.


#Load data
fish.comp<-read.csv(here::here("working","fish_comp_all_counts_2025-05-13.csv")) # FROM AMAT_BDSC_TALKS code

#We don't need all of these columns, narrow it down to what's neccessary 
colnames(fish.comp)
fish.comp2<-fish.comp[,c("SampleID_frp","Location","GearTypeAbbreviation","SeineDeploymentType", "Season", "year","month","fish5.CommonName","TotalCatch")]


#Fix Locations
#Change location names to match dfProject
fish.comp2$Location[fish.comp2$Location == "Stairsteps-\nLiberty Cut"]<-"Stairsteps-Liberty Cut"
fish.comp2$Location[fish.comp2$Location == "Arnold"]<-"Arnold Slough"
fish.comp2$Location[fish.comp2$Location == "Browns"]<-"Browns Island"
fish.comp2$Location[fish.comp2$Location == "Chipps"]<-"Chipps Island"
fish.comp2$Location[fish.comp2$Location == "Decker"]<-"Decker Island"
fish.comp2$Location[fish.comp2$Location == "Flyway Farms"]<-"Yolo Flyway Farms"
fish.comp2$Location[fish.comp2$Location == "Grizzly"]<-"Grizzly Bay"
fish.comp2$Location[fish.comp2$Location == "Horseshoe"]<-"Horseshoe Bend"
fish.comp2$Location[fish.comp2$Location == "Liberty"]<-"Liberty Island"
fish.comp2$Location[fish.comp2$Location == "Ryer"]<-"Ryer Island"
fish.comp2$Location[fish.comp2$Location == "Wing's\nLanding"]<-"Wings Landing"
fish.comp2$Location[fish.comp2$Location == "Wings"]<-"Wings Landing"
fish.comp2$Location[fish.comp2$Location == "Winter"]<-"Winter Island"
fish.comp2$Location[fish.comp2$Location == "WTIB"]<-"Webb Tract Islands and Berms"
fish.comp2$Location[fish.comp2$Location == "Webb Tract Island and Berms"]<-"Webb Tract Islands and Berms"
fish.comp2$Location[fish.comp2$Location == "Nurse-\nDenverton"]<-"Nurse-Denverton"
fish.comp2$Location[fish.comp2$Location == "Peytonia-\nSuisun"]<-"Peytonia-Suisun"
fish.comp2$Location[fish.comp2$Location == "Tule\nRed"]<-"Tule Red"
fish.comp2$Location[fish.comp2$Location == "Blacklock"]<-"Blacklock Marsh"


#Set up site type designations
dfproj <- data.frame(proj = c("Arnold Slough","Bradmoor Island","Chipps Island","Decker Island","Yolo Flyway Farms","Lookout Slough","Lower Yolo Ranch","Tule Red","Wings Landing","Winter Island"),
                     refSite = c("Blacklock Marsh","Blacklock Marsh","Browns Island","Webb Tract Islands and Berms","Liberty Island","Liberty Island","Liberty Island","Ryer Island","Rush Ranch","Browns Island"),
                     chSite = c("Nurse-Denverton","Nurse-Denverton","Honker-Spoonbill","Horseshoe Bend","Toe Drain","Shag Slough","Stairsteps-Liberty Cut","Grizzly Bay","Peytonia-Suisun","Broad Slough"),
                     sharedRegion = c("E Suisun Marsh","E Suisun Marsh","Confluence","Lower Sacramento-San Joaquin","Cache Slough Complex","Cache Slough Complex","Cache Slough Complex","Grizzly Bay","W Suisun Marsh","Confluence"))

#From Danny's code
fish.comp2$type <- ifelse(fish.comp2$Location %in% dfproj$proj, "Restoration", NA)
fish.comp2$type[which(fish.comp2$Location %in% dfproj$refSite)] <- "Reference"
fish.comp2$type[which(fish.comp2$Location %in% dfproj$chSite)] <- "Adj. \nWaterbody"
fish.comp2$type2 <- factor(fish.comp2$type, levels = c("Restoration","Reference","Adj. \nWaterbody"))

fish.comp2$sharedRegion <- NA
for(i in 1:nrow(fish.comp2)){
  for(j in 1:nrow(dfproj)){
    if(fish.comp2$Location[i] %in% c(dfproj[j,])){
      fish.comp2$sharedRegion[i] = dfproj$sharedRegion[j]
    }
  }
}

list(unique(fish.comp2$type2))

fish.comp2<-dplyr::filter(fish.comp2, fish.comp2$GearTypeAbbreviation=="BEASEI"|
                                        fish.comp2$GearTypeAbbreviation=="BIGLAM"|
                                        fish.comp2$GearTypeAbbreviation=="LAMOPE"|
                                        fish.comp2$GearTypeAbbreviation=="OTTTRA")


save(list=ls(),file= here::here("working/RData", "Workplan_Fish_code_01.RData"))

```



```{r Data manipulatio}
# Clear environment
rm(list = ls(all.names = TRUE)) #will clear all objects includes hidden objects.

load(here::here("working","RData", "Workplan_Fish_code_01.RData"))

library(tidyverse)
library(vegan)
library(iNEXT)
library(tidyr)

#Now we need to make this into wide format aka each row is a sample with all the species in columns
# Ensure SampleID and species columns are clean

fish.comp3 <- fish.comp2 %>%
  mutate(SampleID = SampleID_frp,
         Species = fish5.CommonName,
         Catch = TotalCatch,
         Group= Location) %>%
  select(SampleID, Group, Species, Catch)
  
fish.comp4 <- fish.comp2 %>%
  mutate(SampleID = SampleID_frp,
         Species = fish5.CommonName,
         Catch = TotalCatch,
         Group= paste(Location, GearTypeAbbreviation, sep = "_")) %>%
  select(SampleID, Group, Species, Catch)

fish.comp5 <- fish.comp2 %>%
  mutate(SampleID = SampleID_frp,
         Species = fish5.CommonName,
         Catch = TotalCatch,
         Group= paste(Location, GearTypeAbbreviation, Season, sep = "_")) %>%
  select(SampleID, Group, Species, Catch)

#Checking that above worked properly
#If many groups only have 1 SampleID, it means the grouping or pivoting step is aggregating multiple samples.
fish.comp3 %>%
  group_by(Group) %>%
  summarise(n_samples = n_distinct(SampleID)) %>%
  arrange(n_samples)

# Pivot to wide format: samples as rows, species as columns
fish.comp_wide<- fish.comp3 %>%
  pivot_wider(
    id_cols = c(SampleID, Group),         # keep each sample distinct
    names_from = Species,
    values_from = Catch,
    values_fill = 0
  )

fish.comp_wide %>% count(Group)  # how many samples per group?

species_list <- fish.comp_wide %>%
  group_by(Group) %>%
  group_split() %>%
  setNames(unique(fish.comp_wide$Group))

# Keep only groups with 2+ samples
species_list <- species_list[sapply(species_list, nrow) >= 2]

# Remove metadata columns
species_list <- lapply(species_list, function(df) {
  df %>% select(-SampleID, -Group)
})

save(list=ls(),file= here::here("working/RData", "Workplan_Fish_code_02.RData"))

```


```{r Plot Accumulation Curves by Location × Gear}
 #Clear environment
rm(list = ls(all.names = TRUE)) #will clear all objects includes hidden objects.

load(here::here("working","RData", "Workplan_Fish_code_02.RData"))

library(vegan)

# Optional: Set color palette
library(RColorBrewer)
cols <- brewer.pal(min(length(species_list), 8), "Set2")



# Prepare plot space
plot(NULL,
     xlim = c(1, max(sapply(species_list, nrow))),
     ylim = c(0, max(sapply(species_list, function(mat) max(specaccum(mat)$richness)))),
     xlab = "Samples",
     ylab = "Species Richness",
     main = "Species Accumulation by Location × Gear")

# Plot each group's accumulation curve
for (i in seq_along(species_list)) {
  acc <- specaccum(species_list[[i]], method = "random")
  lines(acc$sites, acc$richness, col = cols[i %% length(cols) + 1], lwd = 2)
}

legend("right", legend = names(species_list), col = cols, lwd = 2, cex = 0.7)

# 1. Calculate specaccum results for each group
accum_data <- lapply(names(species_list), function(name) {
  acc <- specaccum(species_list[[name]], method = "random")
  data.frame(
    Samples = acc$sites,
    Richness = acc$richness,
    Group = name
  )
})

# 2. Combine all into one data frame
accum_df <- bind_rows(accum_data)

# 3. Plot with ggplot2
ploX<-ggplot(accum_df, aes(x = Samples, y = Richness, color = Group)) +
  geom_line(size = 1.2) +
  labs(
    title = "Species Accumulation by Location",
    x = "Samples",
    y = "Species Richness",
    color = NULL  # removes default legend title
  ) +
  theme_minimal() +
  theme(
    legend.position = "right",
    plot.title = element_text(hjust = 0.5)
  )
ggsave(paste("RARE_CURVE2_",".png",sep = ""),path = here::here("working/Figures"), ploX, width = 1000, height = 500, dpi = 150, units = "px")





save(list=ls(),file= here::here("working/RData", "Workplan_Fish_code_03.RData"))



```


```{r}
library(dplyr)
library(vegan)
library(purrr)

# Function to calculate samples needed to reach 80% and 90% of estimated richness
samples_to_target <- function(species_matrix, group_name) {
  # 1. Estimate asymptotic richness
  pool <- specpool(species_matrix)
  est_richness <- pool$chao
  
  # 2. Accumulation curve
  acc <- specaccum(species_matrix, method = "random")
  
  # 3. Targets
  target_80 <- 0.8 * est_richness
  target_90 <- 0.9 * est_richness
  
  # 4. Find where richness first reaches or exceeds targets
  n_80 <- min(which(acc$richness >= target_80), na.rm = TRUE)
  n_90 <- min(which(acc$richness >= target_90), na.rm = TRUE)
  
  # If never reaches target, return NA
  if (is.infinite(n_80)) n_80 <- NA
  if (is.infinite(n_90)) n_90 <- NA
  
  return(tibble(
    Group = group_name,
    Estimated_Richness = est_richness,
    Samples_80pct = n_80,
    Samples_90pct = n_90,
    Max_Samples = length(acc$sites),
    Max_Observed_Richness = max(acc$richness)
  ))
}

# Run for all groups
results_tbl <- imap_dfr(species_list, samples_to_target)

# View results
print(results_tbl)

```

```{r}
#Clear environment
rm(list = ls(all.names = TRUE)) #will clear all objects includes hidden objects.

load(here::here("working","RData", "Workplan_Fish_code_03.RData"))


library(iNEXT)
library(dplyr)
library(purrr)

# Step 1: Convert each tibble to summed species abundance (across all samples)
abund_list <- map(species_list, ~ colSums(as.data.frame(.x)))

# Step 2: Run iNEXT to estimate asymptotic richness
out <- iNEXT(abund_list, q = 0, datatype = "abundance")

# Step 3: Extract asymptotic estimates
asymptotes <- out$AsyEst

# Step 4: Clean up table (optional)
asymptotes_clean <- asymptotes %>%
  select(site, Observed = S.obs, Est = Chat.1, SE = se.1, Coverage = SC, MaxEst = Cmax)

# View result
print(asymptotes_clean)


```

